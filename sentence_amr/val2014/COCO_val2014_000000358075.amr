# ::tok One pizza is fully eaten while other pizzas still have slices left .
# ::node	0	1	0-1
# ::node	p	pizza	1-2
# ::node	p2	pizza	1-2
# ::node	f	full-09	3-4
# ::node	e	eat-01	4-5
# ::node	c	contrast-01	5-6
# ::node	o	other	6-7
# ::node	s2	still	8-9
# ::node	h	have-03	9-10
# ::node	s	slice	10-11
# ::node	l	leave-17	11-12
# ::root	c	contrast-01
# ::edge	pizza	quant	1	p	0	
# ::edge	eat-01	degree	full-09	e	f	
# ::edge	eat-01	ARG1	pizza	e	p	
# ::edge	contrast-01	ARG1	eat-01	c	e	
# ::edge	pizza	mod	other	p2	o	
# ::edge	have-03	mod	still	h	s2	
# ::edge	contrast-01	ARG2	have-03	c	h	
# ::edge	have-03	ARG0	pizza	h	p2	
# ::edge	have-03	ARG1	slice	h	s	
# ::edge	slice	ARG1-of	leave-17	s	l	
(c / contrast-01
    :ARG1 (e / eat-01
        :ARG1 (p / pizza
            :quant 1)
        :degree (f / full-09))
    :ARG2 (h / have-03
        :ARG0 (p2 / pizza
            :mod (o / other))
        :ARG1 (s / slice
            :ARG1-of (l / leave-17))
        :mod (s2 / still)))
