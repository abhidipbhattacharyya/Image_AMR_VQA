# ::tok A man tinkers with what appears to be a train , another watches the camera
# ::node	m	man	1-2
# ::node	m2	man	1-2
# ::node	t2	tinker-01	2-3
# ::node	t	thing	4-5
# ::node	a3	appear-02	5-6
# ::node	t3	train	9-10
# ::node	a	and	10-11
# ::node	a2	another	11-12
# ::node	w	watch-01	12-13
# ::node	c	camera	14-15
# ::root	a	and
# ::edge	tinker-01	ARG0	man	t2	m	
# ::edge	tinker-01	ARG1	thing	t2	t	
# ::edge	thing	ARG1-of	appear-02	t	a3	
# ::edge	appear-02	ARG2	train	a3	t3	
# ::edge	and	op1	tinker-01	a	t2	
# ::edge	man	mod	another	m2	a2	
# ::edge	and	op2	watch-01	a	w	
# ::edge	watch-01	ARG0	man	w	m2	
# ::edge	watch-01	ARG1	camera	w	c	
(a / and
    :op1 (t2 / tinker-01
        :ARG0 (m / man)
        :ARG1 (t / thing
            :ARG1-of (a3 / appear-02
                :ARG2 (t3 / train))))
    :op2 (w / watch-01
        :ARG0 (m2 / man
            :mod (a2 / another))
        :ARG1 (c / camera)))
