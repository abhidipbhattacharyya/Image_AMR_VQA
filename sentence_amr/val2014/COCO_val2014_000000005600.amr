# ::tok A plate has two bowls on it with two different types of food , one looks like pickled onions and the other looks like cooked meat .
# ::node	p2	plate	1-2
# ::node	h	have-03	2-3
# ::node	0	2	3-4
# ::node	p3	plate	4-5
# ::node	1	2	8-9
# ::node	d	differ-02	9-10
# ::node	t	type	10-11
# ::node	f	food	12-13
# ::node	o	one	14-15
# ::node	l	look-02	15-16
# ::node	p	pickle-01	17-18
# ::node	p4	potato	18-19
# ::node	a	and	19-20
# ::node	o2	other	21-22
# ::node	l2	look-02	22-23
# ::node	c	cook-01	24-25
# ::node	m	meat	25-26
# ::root	h	have-03
# ::edge	have-03	ARG0	plate	h	p2	
# ::edge	plate	quant	2	p3	0	
# ::edge	have-03	ARG1	plate	h	p3	
# ::edge	type	ARG1-of	differ-02	t	d	
# ::edge	type	quant	2	t	1	
# ::edge	plate	consist-of	type	p3	t	
# ::edge	type	consist-of	food	t	f	
# ::edge	look-02	ARG0	one	l	o	
# ::edge	potato	ARG1-of	pickle-01	p4	p	
# ::edge	look-02	ARG1	potato	l	p4	
# ::edge	and	op1	look-02	a	l	
# ::edge	type	example	and	t	a	
# ::edge	look-02	ARG0	other	l2	o2	
# ::edge	and	op2	look-02	a	l2	
# ::edge	meat	ARG1-of	cook-01	m	c	
# ::edge	look-02	ARG1	meat	l2	m	
(h / have-03
    :ARG0 (p2 / plate)
    :ARG1 (p3 / plate
        :quant 2
        :consist-of (t / type
            :quant 2
            :ARG1-of (d / differ-02)
            :consist-of (f / food)
            :example (a / and
                :op1 (l / look-02
                    :ARG0 (o / one)
                    :ARG1 (p4 / potato
                        :ARG1-of (p / pickle-01)))
                :op2 (l2 / look-02
                    :ARG0 (o2 / other)
                    :ARG1 (m / meat
                        :ARG1-of (c / cook-01)))))))
