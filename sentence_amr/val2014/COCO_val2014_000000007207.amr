# ::tok Four men standing against a brick wall with one of them eating from a food container , one with several carrots stuffed into him mouth and the other two standing next to them .
# ::node	3	4	0-1
# ::node	m	man	1-2
# ::node	m2	man	1-2
# ::node	m3	man	1-2
# ::node	s2	stand-01	2-3
# ::node	a	against	3-4
# ::node	b	brick	5-6
# ::node	w	wall	6-7
# ::node	i	include-91	8-9
# ::node	0	1	8-9
# ::node	e	eat-01	11-12
# ::node	f	food	14-15
# ::node	c2	container	15-16
# ::node	i2	include-91	17-18
# ::node	1	1	17-18
# ::node	h	have-03	18-19
# ::node	s	several	19-20
# ::node	c	carrot	20-21
# ::node	s4	stuff-01	21-22
# ::node	m4	mouth	24-25
# ::node	a2	and	25-26
# ::node	o	other	27-28
# ::node	2	2	28-29
# ::node	s3	stand-01	29-30
# ::node	n	next-to	30-31
# ::root	a2	and
# ::edge	man	quant	4	m	3	
# ::edge	stand-01	ARG1	man	s2	m	
# ::edge	stand-01	ARG2	against	s2	a	
# ::edge	wall	consist-of	brick	w	b	
# ::edge	against	op1	wall	a	w	
# ::edge	man	ARG1-of	include-91	m2	i	
# ::edge	include-91	ARG2	man	i	m	
# ::edge	man	quant	1	m2	0	
# ::edge	man	ARG0-of	eat-01	m2	e	
# ::edge	container	mod	food	c2	f	
# ::edge	eat-01	source	container	e	c2	
# ::edge	man	ARG1-of	include-91	m2	i2	
# ::edge	include-91	ARG2	man	i2	m	
# ::edge	man	quant	1	m2	1	
# ::edge	man	ARG0-of	have-03	m2	h	
# ::edge	carrot	quant	several	c	s	
# ::edge	have-03	ARG1	carrot	h	c	
# ::edge	carrot	ARG2-of	stuff-01	c	s4	
# ::edge	stuff-01	ARG2	mouth	s4	m4	
# ::edge	include-91	part	mouth	i2	m4	
# ::edge	and	op1	stand-01	a2	s2	
# ::edge	man	mod	other	m3	o	
# ::edge	man	quant	2	m3	2	
# ::edge	and	op2	stand-01	a2	s3	
# ::edge	stand-01	ARG1	man	s3	m3	
# ::edge	stand-01	ARG2	next-to	s3	n	
# ::edge	next-to	op1	against	n	a	
# ::edge	and	rel	man	a2	m2	
(a2 / and
    :op1 (s2 / stand-01
        :ARG1 (m / man
            :quant 4)
        :ARG2 (a / against
            :op1 (w / wall
                :consist-of (b / brick))))
    :op2 (s3 / stand-01
        :ARG1 (m3 / man
            :quant 2
            :mod (o / other))
        :ARG2 (n / next-to
            :op1 a))
    :rel (m2 / man
        :quant 1
        :quant 1
        :ARG0-of (e / eat-01
            :source (c2 / container
                :mod (f / food)))
        :ARG0-of (h / have-03
            :ARG1 (c / carrot
                :quant (s / several)
                :ARG2-of (s4 / stuff-01
                    :ARG2 (m4 / mouth))))
        :ARG1-of (i / include-91
            :ARG2 m)
        :ARG1-of (i2 / include-91
            :ARG2 m
            :part m4)))
