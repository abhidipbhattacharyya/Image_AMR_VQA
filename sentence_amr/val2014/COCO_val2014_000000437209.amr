# ::tok A stack of suit cases stacked from largest on bottom to smallest on top .
# ::node	s2	stack-01	1-2
# ::node	s4	suit	3-4
# ::node	c	case	4-5
# ::node	s3	stack-01	5-6
# ::node	h	have-degree-91	7-8
# ::node	l	large	7-8
# ::node	m	most	7-8
# ::node	h2	have-degree-91	7-8
# ::node	b	bottom	9-10
# ::node	s	small	11-12
# ::node	m2	most	11-12
# ::node	t	top	13-14
# ::root	s3	stack-01
# ::edge	case	consist-of	suit	c	s4	
# ::edge	stack-01	ARG1	case	s2	c	
# ::edge	stack-01	ARG1	stack-01	s3	s2	
# ::edge	stack-01	ARG3	have-degree-91	s3	h	
# ::edge	have-degree-91	ARG2	large	h	l	
# ::edge	have-degree-91	ARG3	most	h	m	
# ::edge	stack-01	ARG4	have-degree-91	s3	h2	
# ::edge	have-degree-91	ARG2	small	h2	s	
# ::edge	have-degree-91	ARG3	most	h2	m2	
# ::edge	have-degree-91	location	top	h2	t	
# ::edge	stack-01	rel	bottom	s3	b	
(s3 / stack-01
    :ARG1 (s2 / stack-01
        :ARG1 (c / case
            :consist-of (s4 / suit)))
    :ARG3 (h / have-degree-91
        :ARG2 (l / large)
        :ARG3 (m / most))
    :ARG4 (h2 / have-degree-91
        :ARG2 (s / small)
        :ARG3 (m2 / most)
        :location (t / top))
    :rel (b / bottom))
