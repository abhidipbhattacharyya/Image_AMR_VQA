# ::tok a stop sign and a green and white arrow sign and some cars
# ::node	s5	stop-01	1-2
# ::node	s2	signal-07	2-3
# ::node	g	green-02	5-6
# ::node	a	and	6-7
# ::node	w	white-03	7-8
# ::node	a2	arrow	8-9
# ::node	s3	signal-07	9-10
# ::node	s	sign	9-10
# ::node	s4	some	11-12
# ::node	c	car	12-13
# ::root	a	and
# ::edge	signal-07	ARG1	stop-01	s2	s5	
# ::edge	and	op1	signal-07	a	s2	
# ::edge	arrow	ARG1-of	white-03	a2	w	
# ::edge	signal-07	ARG1	arrow	s3	a2	
# ::edge	and	op2	signal-07	a	s3	
# ::edge	signal-07	ARG1-of	green-02	s3	g	
# ::edge	sign	mod	arrow	s	a2	
# ::edge	and	op3	sign	a	s	
# ::edge	car	quant	some	c	s4	
# ::edge	and	op4	car	a	c	
(a / and
    :op1 (s2 / signal-07
        :ARG1 (s5 / stop-01))
    :op2 (s3 / signal-07
        :ARG1 (a2 / arrow
            :ARG1-of (w / white-03))
        :ARG1-of (g / green-02))
    :op3 (s / sign
        :mod a2)
    :op4 (c / car
        :quant (s4 / some)))
