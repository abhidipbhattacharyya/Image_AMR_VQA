# ::tok A broken flip phone sits , in two pieces , on the counter .
# ::node	b	break-01	1-2
# ::node	f	flip-01	2-3
# ::node	p	phone	3-4
# ::node	s	sit-01	4-5
# ::node	0	2	7-8
# ::node	p2	piece	8-9
# ::node	c	counter	12-13
# ::root	s	sit-01
# ::edge	phone	ARG1-of	flip-01	p	f	
# ::edge	phone	ARG1-of	break-01	p	b	
# ::edge	sit-01	ARG1	phone	s	p	
# ::edge	piece	quant	2	p2	0	
# ::edge	phone	manner	piece	p	p2	
# ::edge	sit-01	ARG2	counter	s	c	
(s / sit-01
    :ARG1 (p / phone
        :ARG1-of (f / flip-01)
        :ARG1-of (b / break-01)
        :manner (p2 / piece
            :quant 2))
    :ARG2 (c / counter))
