# ::tok Glass window in L shape with buildings and tree branches
# ::node	g	glass	0-1
# ::node	w	window	1-2
# ::node	s2	string-entity	3-4
# ::node	0	L	3-4
# ::node	s	shape-01	4-5
# ::node	b2	building	6-7
# ::node	a	and	7-8
# ::node	t	tree	8-9
# ::node	b	branch	9-10
# ::root	w	window
# ::edge	window	consist-of	glass	w	g	
# ::edge	string-entity	value	L	s2	0	
# ::edge	shape-01	ARG2	string-entity	s	s2	
# ::edge	window	ARG1-of	shape-01	w	s	
# ::edge	and	op1	building	a	b2	
# ::edge	window	consist-of	and	w	a	
# ::edge	branch	part-of	tree	b	t	
# ::edge	and	op2	branch	a	b	
(w / window
    :ARG1-of (s / shape-01
        :ARG2 (s2 / string-entity
            :value "L"))
    :consist-of (g / glass)
    :consist-of (a / and
        :op1 (b2 / building)
        :op2 (b / branch
            :part-of (t / tree))))
