# ::tok Two boxes of pizza sit on a wood table and one of the boxes is closed while the other is open to reveal a whole pizza inside of it .
# ::node	1	2	0-1
# ::node	b	box	1-2
# ::node	b2	box	1-2
# ::node	p	pizza	3-4
# ::node	s	sit-01	4-5
# ::node	w2	wood	7-8
# ::node	t	table	8-9
# ::node	a	and	9-10
# ::node	0	1	10-11
# ::node	i	include-91	11-12
# ::node	c	close-01	15-16
# ::node	c2	contrast-01	16-17
# ::node	o2	other	18-19
# ::node	o	open-01	20-21
# ::node	r	reveal-01	22-23
# ::node	w	whole	24-25
# ::node	p2	pizza	25-26
# ::node	i2	inside	26-27
# ::root	a	and
# ::edge	box	quant	2	b	1	
# ::edge	box	mod	pizza	b	p	
# ::edge	sit-01	ARG1	box	s	b	
# ::edge	table	consist-of	wood	t	w2	
# ::edge	sit-01	ARG2	table	s	t	
# ::edge	and	op1	sit-01	a	s	
# ::edge	box	quant	1	b2	0	
# ::edge	include-91	ARG2	box	i	b2	
# ::edge	and	op2	close-01	a	c	
# ::edge	close-01	ARG1	box	c	b	
# ::edge	close-01	ARG1-of	contrast-01	c	c2	
# ::edge	box	mod	other	b2	o2	
# ::edge	contrast-01	ARG2	open-01	c2	o	
# ::edge	open-01	ARG1	box	o	b2	
# ::edge	open-01	purpose	reveal-01	o	r	
# ::edge	reveal-01	ARG0	box	r	b2	
# ::edge	pizza	mod	whole	p2	w	
# ::edge	reveal-01	ARG1	pizza	r	p2	
# ::edge	pizza	location	inside	p2	i2	
# ::edge	inside	op1	box	i2	b	
# ::edge	and	rel	include-91	a	i	
(a / and
    :op1 (s / sit-01
        :ARG1 (b / box
            :quant 2
            :mod (p / pizza))
        :ARG2 (t / table
            :consist-of (w2 / wood)))
    :op2 (c / close-01
        :ARG1 b
        :ARG1-of (c2 / contrast-01
            :ARG2 (o / open-01
                :purpose (r / reveal-01
                    :ARG0 (b2 / box
                        :quant 1
                        :mod (o2 / other))
                    :ARG1 (p2 / pizza
                        :location (i2 / inside
                            :op1 b)
                        :mod (w / whole)))
                :ARG1 b2)))
    :rel (i / include-91
        :ARG2 b2))
