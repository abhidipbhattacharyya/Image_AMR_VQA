# ::tok Man in a cafe about to eat a double decker sandwich
# ::node	m	man	0-1
# ::node	c	cafe	3-4
# ::node	a	about-to	4-5
# ::node	e	eat-01	6-7
# ::node	0	2	8-9
# ::node	d	decker	9-10
# ::node	s	sandwich	10-11
# ::root	e	eat-01
# ::edge	eat-01	time	about-to	e	a	
# ::edge	eat-01	location	cafe	e	c	
# ::edge	eat-01	ARG0	man	e	m	
# ::edge	decker	quant	2	d	0	
# ::edge	sandwich	mod	decker	s	d	
# ::edge	eat-01	ARG1	sandwich	e	s	
(e / eat-01
    :ARG0 (m / man)
    :ARG1 (s / sandwich
        :mod (d / decker
            :quant 2))
    :location (c / cafe)
    :time (a / about-to))
