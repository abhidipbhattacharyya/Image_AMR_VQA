# ::tok Black soft case suitcase with cat inside , on olive green bed spread on twin bed , maybe hotel room .
# ::node	b3	black-04	0-1
# ::node	s	soft-02	1-2
# ::node	c	case	2-3
# ::node	s3	suitcase	3-4
# ::node	h	have-03	4-5
# ::node	c2	cat	5-6
# ::node	i	inside	6-7
# ::node	b4	black-04	9-10
# ::node	g	green-02	10-11
# ::node	b	bed	11-12
# ::node	s2	spread-01	12-13
# ::node	t	twin	14-15
# ::node	b2	bed	15-16
# ::node	a	and	16-17
# ::node	p	possible-01	17-18
# ::node	h2	hotel	18-19
# ::node	r	room	19-20
# ::root	a	and
# ::edge	case	ARG1-of	soft-02	c	s	
# ::edge	case	ARG1-of	black-04	c	b3	
# ::edge	suitcase	consist-of	case	s3	c	
# ::edge	suitcase	ARG0-of	have-03	s3	h	
# ::edge	have-03	ARG1	cat	h	c2	
# ::edge	cat	location	inside	c2	i	
# ::edge	inside	op1	case	i	c	
# ::edge	green-02	ARG1-of	black-04	g	b4	
# ::edge	bed	ARG1-of	green-02	b	g	
# ::edge	bed	mod	twin	b2	t	
# ::edge	spread-01	ARG2	bed	s2	b2	
# ::edge	and	op2	spread-01	a	s2	
# ::edge	and	op1	suitcase	a	s3	
# ::edge	room	mod	hotel	r	h2	
# ::edge	room	ARG1-of	possible-01	r	p	
# ::edge	and	op3	room	a	r	
# ::edge	and	rel	bed	a	b	
(a / and
    :op1 (s3 / suitcase
        :ARG0-of (h / have-03
            :ARG1 (c2 / cat
                :location (i / inside
                    :op1 (c / case
                        :ARG1-of (s / soft-02)
                        :ARG1-of (b3 / black-04)))))
        :consist-of c)
    :op2 (s2 / spread-01
        :ARG2 (b2 / bed
            :mod (t / twin)))
    :op3 (r / room
        :ARG1-of (p / possible-01)
        :mod (h2 / hotel))
    :rel (b / bed
        :ARG1-of (g / green-02
            :ARG1-of (b4 / black-04))))
