# ::tok Three laptops stacked on top of each other , from largest to smallest with a cell phone on the top .
# ::node	0	3	0-1
# ::node	n	name	1-2
# ::node	l	laptop	1-2
# ::node	s2	stack-01	2-3
# ::node	t	top	4-5
# ::node	e	each	6-7
# ::node	o	other	7-8
# ::node	r	range-01	9-10
# ::node	h2	have-degree-91	10-11
# ::node	l2	large	10-11
# ::node	m	most	10-11
# ::node	a	and	11-12
# ::node	h3	have-degree-91	12-13
# ::node	s	small	12-13
# ::node	m2	most	12-13
# ::node	h	have-03	13-14
# ::node	c	cell	15-16
# ::node	p	phone	16-17
# ::node	b	be-located-at-91	17-18
# ::node	t2	top	19-20
# ::node	t3	top	19-20
# ::root	s2	stack-01
# ::edge	laptop	quant	3	l	0	
# ::edge	stack-01	ARG1	laptop	s2	l	
# ::edge	stack-01	ARG2	top	s2	t	
# ::edge	top	mod	each	t	e	
# ::edge	each	op1	other	e	o	
# ::edge	laptop	ARG1-of	range-01	l	r	
# ::edge	have-degree-91	ARG2	large	h2	l2	
# ::edge	have-degree-91	ARG3	most	h2	m	
# ::edge	and	op1	have-degree-91	a	h2	
# ::edge	range-01	ARG3	and	r	a	
# ::edge	and	op2	have-degree-91	a	h3	
# ::edge	have-degree-91	ARG2	small	h3	s	
# ::edge	have-degree-91	ARG3	most	h3	m2	
# ::edge	phone	mod	cell	p	c	
# ::edge	have-03	ARG1	phone	h	p	
# ::edge	be-located-at-91	ARG1	have-03	b	h	
# ::edge	and	ARG2-of	be-located-at-91	a	b	
# ::edge	be-located-at-91	location	top	b	t2	
# ::edge	stack-01	ARG2	top	s2	t3	
# ::edge	stack-01	rel	name	s2	n	
(s2 / stack-01
    :ARG1 (l / laptop
        :quant 3
        :ARG1-of (r / range-01
            :ARG3 (a / and
                :ARG2-of (b / be-located-at-91
                    :ARG1 (h / have-03
                        :ARG1 (p / phone
                            :mod (c / cell)))
                    :location (t2 / top))
                :op1 (h2 / have-degree-91
                    :ARG2 (l2 / large)
                    :ARG3 (m / most))
                :op2 (h3 / have-degree-91
                    :ARG2 (s / small)
                    :ARG3 (m2 / most)))))
    :ARG2 (t / top
        :mod (e / each
            :op1 (o / other)))
    :ARG2 (t3 / top)
    :rel (n / name))
