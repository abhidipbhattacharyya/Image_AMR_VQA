# ::tok two different double decker buses one is red and white the other green and white
# ::node	1	2	0-1
# ::node	d2	differ-02	1-2
# ::node	d3	double	2-3
# ::node	d	decker	3-4
# ::node	b	bus	4-5
# ::node	b2	bus	4-5
# ::node	b3	bus	4-5
# ::node	i	include-91	5-6
# ::node	i2	include-91	5-6
# ::node	0	1	5-6
# ::node	r	red-02	7-8
# ::node	a	and	8-9
# ::node	w	white-03	9-10
# ::node	o	other	11-12
# ::node	g	green-02	12-13
# ::node	w2	white-03	14-15
# ::root	a	and
# ::edge	decker	mod	double	d	d3	
# ::edge	bus	mod	decker	b	d	
# ::edge	bus	ARG1-of	differ-02	b	d2	
# ::edge	bus	quant	2	b	1	
# ::edge	bus	ARG2-of	include-91	b2	i	
# ::edge	include-91	ARG1	bus	i	b	
# ::edge	include-91	ARG1	bus	i2	b3	
# ::edge	bus	ARG2-of	include-91	b	i2	
# ::edge	bus	quant	1	b2	0	
# ::edge	bus	ARG1-of	red-02	b2	r	
# ::edge	and	op1	bus	a	b2	
# ::edge	bus	ARG1-of	white-03	b2	w	
# ::edge	bus	mod	other	b3	o	
# ::edge	bus	ARG1-of	green-02	b3	g	
# ::edge	bus	ARG1-of	white-03	b3	w2	
(a / and
    :op1 (b2 / bus
        :quant 1
        :ARG1-of (r / red-02)
        :ARG1-of (w / white-03)
        :ARG2-of (i / include-91
            :ARG1 (b / bus
                :quant 2
                :ARG1-of (d2 / differ-02)
                :ARG2-of (i2 / include-91
                    :ARG1 (b3 / bus
                        :ARG1-of (g / green-02)
                        :ARG1-of (w2 / white-03)
                        :mod (o / other)))
                :mod (d / decker
                    :mod (d3 / double))))))
