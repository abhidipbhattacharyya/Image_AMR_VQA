# ::tok a slice of cake with a strawberry and a chocolate sign that says paris
# ::node	s3	slice	1-2
# ::node	c	cake	3-4
# ::node	h	have-03	4-5
# ::node	s4	strawberry	6-7
# ::node	a	and	7-8
# ::node	c2	chocolate	9-10
# ::node	s2	sign	10-11
# ::node	s	say-01	12-13
# ::node	s5	string-entity	13-14
# ::node	0	France	13-14
# ::root	s3	slice
# ::edge	slice	consist-of	cake	s3	c	
# ::edge	slice	ARG0-of	have-03	s3	h	
# ::edge	and	op1	strawberry	a	s4	
# ::edge	have-03	ARG1	and	h	a	
# ::edge	sign	mod	chocolate	s2	c2	
# ::edge	and	op2	sign	a	s2	
# ::edge	sign	ARG0-of	say-01	s2	s	
# ::edge	say-01	ARG1	string-entity	s	s5	
# ::edge	string-entity	value	France	s5	0	
(s3 / slice
    :ARG0-of (h / have-03
        :ARG1 (a / and
            :op1 (s4 / strawberry)
            :op2 (s2 / sign
                :ARG0-of (s / say-01
                    :ARG1 (s5 / string-entity
                        :value "France"))
                :mod (c2 / chocolate))))
    :consist-of (c / cake))
