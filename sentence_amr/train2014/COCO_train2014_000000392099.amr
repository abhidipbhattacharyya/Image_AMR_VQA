# ::tok Two white and black trains on tracks with bridge in the background .
# ::node	0	2	0-1
# ::node	w	white-03	1-2
# ::node	a	and	2-3
# ::node	b2	black-04	3-4
# ::node	t2	train	4-5
# ::node	t3	train	4-5
# ::node	t	track	6-7
# ::node	h	have-03	7-8
# ::node	b3	bridge	8-9
# ::node	b	background	11-12
# ::root	a	and
# ::edge	and	quant	2	a	0	
# ::edge	and	op1	train	a	t2	
# ::edge	train	ARG1-of	white-03	t2	w	
# ::edge	train	ARG1-of	black-04	t3	b2	
# ::edge	and	op2	train	a	t3	
# ::edge	and	location	track	a	t	
# ::edge	and	ARG0-of	have-03	a	h	
# ::edge	have-03	ARG1	bridge	h	b3	
# ::edge	bridge	location	background	b3	b	
(a / and
    :quant 2
    :ARG0-of (h / have-03
        :ARG1 (b3 / bridge
            :location (b / background)))
    :location (t / track)
    :op1 (t2 / train
        :ARG1-of (w / white-03))
    :op2 (t3 / train
        :ARG1-of (b2 / black-04)))
