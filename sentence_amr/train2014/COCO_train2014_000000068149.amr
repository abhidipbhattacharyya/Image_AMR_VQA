# ::tok He adjusts his skis to the right to correct his position .
# ::node	h	he	0-1
# ::node	a	adjust-01	1-2
# ::node	s	ski-01	3-4
# ::node	r	right-04	6-7
# ::node	c	correct-01	8-9
# ::node	t	thing	9-10
# ::node	t2	thing	10-11
# ::node	p	position-02	10-11
# ::root	a	adjust-01
# ::edge	adjust-01	ARG0	he	a	h	
# ::edge	ski-01	ARG0	adjust-01	s	a	
# ::edge	adjust-01	purpose	correct-01	a	c	
# ::edge	correct-01	ARG0	he	c	h	
# ::edge	thing	ARG1-of	right-04	t	r	
# ::edge	thing	ARG1-of	ski-01	t	s	
# ::edge	adjust-01	ARG1	thing	a	t	
# ::edge	correct-01	ARG1	thing	c	t2	
# ::edge	thing	ARG2-of	position-02	t2	p	
# ::edge	position-02	ARG0	he	p	h	
(a / adjust-01
    :purpose (c / correct-01
        :ARG0 (h / he)
        :ARG1 (t2 / thing
            :ARG2-of (p / position-02
                :ARG0 h)))
    :ARG0 h
    :ARG1 (t / thing
        :ARG1-of (r / right-04)
        :ARG1-of (s / ski-01
            :ARG0 a)))
