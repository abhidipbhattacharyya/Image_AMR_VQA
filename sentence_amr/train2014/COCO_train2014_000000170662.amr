# ::tok An incoming train on the tracks in an outlying area of the town
# ::node	c	come-in-07	1-2
# ::node	t3	train	2-3
# ::node	t2	track	5-6
# ::node	0	-	7-8
# ::node	o	out	8-9
# ::node	a	area	9-10
# ::node	t	town	12-13
# ::root	t3	train
# ::edge	train	ARG1-of	come-in-07	t3	c	
# ::edge	train	location	track	t3	t2	
# ::edge	out	polarity	-	o	0	
# ::edge	area	mod	out	a	o	
# ::edge	train	location	area	t3	a	
# ::edge	area	part-of	town	a	t	
(t3 / train
    :ARG1-of (c / come-in-07)
    :location (t2 / track)
    :location (a / area
        :mod (o / out
            :polarity -)
        :part-of (t / town)))
