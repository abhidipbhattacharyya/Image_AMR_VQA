# ::tok A pole container an obscene amount of traffic lights in all different directions .
# ::node	p	pole	1-2
# ::node	c	container	2-3
# ::node	o	obscene	4-5
# ::node	a2	amount	5-6
# ::node	t	traffic	7-8
# ::node	l	light	8-9
# ::node	a3	and	9-10
# ::node	a	all	10-11
# ::node	d	differ-02	11-12
# ::node	d2	direction	12-13
# ::root	a3	and
# ::edge	container	mod	pole	c	p	
# ::edge	amount	mod	obscene	a2	o	
# ::edge	light	mod	traffic	l	t	
# ::edge	light	quant	amount	l	a2	
# ::edge	and	op2	light	a3	l	
# ::edge	and	op1	container	a3	c	
# ::edge	direction	ARG1-of	differ-02	d2	d	
# ::edge	direction	mod	all	d2	a	
# ::edge	light	direction	direction	l	d2	
(a3 / and
    :op1 (c / container
        :mod (p / pole))
    :op2 (l / light
        :quant (a2 / amount
            :mod (o / obscene))
        :direction (d2 / direction
            :ARG1-of (d / differ-02)
            :mod (a / all))
        :mod (t / traffic)))
