# ::tok A gray and white cat laying on
# ::node	g	gray-02	1-2
# ::node	w	white-03	3-4
# ::node	c	cat	4-5
# ::node	l	lay-01	5-6
# ::root	l	lay-01
# ::edge	cat	ARG1-of	white-03	c	w	
# ::edge	cat	ARG1-of	gray-02	c	g	
# ::edge	lay-01	ARG1	cat	l	c	
(l / lay-01
    :ARG1 (c / cat
        :ARG1-of (w / white-03)
        :ARG1-of (g / gray-02)))


# ::tok it 's back with it 's head looking up in a open drawer .
# ::node	i	it	0-1
# ::node	b	back	2-3
# ::node	h	head	6-7
# ::node	l	look-01	7-8
# ::node	u	up	8-9
# ::node	b2	be-located-at-91	9-10
# ::node	o	open-01	11-12
# ::node	d	drawer	12-13
# ::root	l	look-01
# ::edge	it	part	head	i	h	
# ::edge	look-01	ARG0	it	l	i	
# ::edge	look-01	direction	up	l	u	
# ::edge	look-01	ARG1	be-located-at-91	l	b2	
# ::edge	be-located-at-91	ARG2	back	b2	b	
# ::edge	be-located-at-91	ARG1	it	b2	i	
# ::edge	drawer	ARG1-of	open-01	d	o	
# ::edge	look-01	location	drawer	l	d	
(l / look-01
    :ARG0 (i / it
        :part (h / head))
    :ARG1 (b2 / be-located-at-91
        :ARG1 i
        :ARG2 (b / back))
    :direction (u / up)
    :location (d / drawer
        :ARG1-of (o / open-01)))
