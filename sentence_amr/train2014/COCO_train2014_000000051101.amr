# ::tok What appears to be a playground without grass , shows stairs at one end and to the foreground a pole with a catch area holding discs and a circular top with chain links .
# ::node	i	it	0-1
# ::node	a3	appear-02	1-2
# ::node	p	playground	5-6
# ::node	h	have-03	6-7
# ::node	0	-	6-7
# ::node	g	grass	7-8
# ::node	s	show-01	9-10
# ::node	s2	stair	10-11
# ::node	o	one	12-13
# ::node	e	end	13-14
# ::node	a	and	14-15
# ::node	f	foreground	17-18
# ::node	p2	pole	19-20
# ::node	h2	have-03	20-21
# ::node	c	catch-03	22-23
# ::node	a4	area	23-24
# ::node	h3	hold-01	24-25
# ::node	d	disc	25-26
# ::node	a2	and	26-27
# ::node	c3	circular	28-29
# ::node	t	top	29-30
# ::node	c2	chain	31-32
# ::node	l	link-01	32-33
# ::root	s	show-01
# ::edge	it	ARG1-of	appear-02	i	a3	
# ::edge	appear-02	ARG2	playground	a3	p	
# ::edge	playground	ARG0-of	have-03	p	h	
# ::edge	have-03	polarity	-	h	0	
# ::edge	have-03	ARG1	grass	h	g	
# ::edge	show-01	ARG0	it	s	i	
# ::edge	end	mod	one	e	o	
# ::edge	stair	location	end	s2	e	
# ::edge	and	op1	stair	a	s2	
# ::edge	show-01	ARG1	and	s	a	
# ::edge	pole	location	foreground	p2	f	
# ::edge	and	op2	pole	a	p2	
# ::edge	pole	ARG0-of	have-03	p2	h2	
# ::edge	area	location-of	catch-03	a4	c	
# ::edge	area	ARG0-of	hold-01	a4	h3	
# ::edge	hold-01	ARG1	disc	h3	d	
# ::edge	and	op1	area	a2	a4	
# ::edge	have-03	ARG1	and	h2	a2	
# ::edge	top	mod	circular	t	c3	
# ::edge	and	op2	top	a2	t	
# ::edge	link-01	ARG2	chain	l	c2	
# ::edge	top	ARG1-of	link-01	t	l	
(s / show-01
    :ARG0 (i / it
        :ARG1-of (a3 / appear-02
            :ARG2 (p / playground
                :ARG0-of (h / have-03
                    :ARG1 (g / grass)
                    :polarity -))))
    :ARG1 (a / and
        :op1 (s2 / stair
            :location (e / end
                :mod (o / one)))
        :op2 (p2 / pole
            :ARG0-of (h2 / have-03
                :ARG1 (a2 / and
                    :op1 (a4 / area
                        :ARG0-of (h3 / hold-01
                            :ARG1 (d / disc))
                        :location-of (c / catch-03))
                    :op2 (t / top
                        :ARG1-of (l / link-01
                            :ARG2 (c2 / chain))
                        :mod (c3 / circular))))
            :location (f / foreground))))
