# ::tok A blue and yellow caboose car connected to a train rests on a railroad track in front of a building with stairs .
# ::node	b	blue	1-2
# ::node	a	and	2-3
# ::node	y	yellow-02	3-4
# ::node	c	caboose	4-5
# ::node	c2	car	5-6
# ::node	c3	car	5-6
# ::node	c4	connect-01	6-7
# ::node	t2	train	9-10
# ::node	r2	rest-01	10-11
# ::node	r	railroad	13-14
# ::node	t	track	14-15
# ::node	i	in-front-of	16-17
# ::node	b2	building	19-20
# ::node	h	have-03	20-21
# ::node	s	stair	21-22
# ::root	r2	rest-01
# ::edge	car	mod	caboose	c2	c	
# ::edge	and	op1	car	a	c2	
# ::edge	car	mod	blue	c2	b	
# ::edge	car	mod	caboose	c3	c	
# ::edge	car	ARG1-of	yellow-02	c3	y	
# ::edge	and	op2	car	a	c3	
# ::edge	and	ARG1-of	connect-01	a	c4	
# ::edge	connect-01	ARG2	train	c4	t2	
# ::edge	rest-01	ARG1	and	r2	a	
# ::edge	track	mod	railroad	t	r	
# ::edge	rest-01	ARG2	track	r2	t	
# ::edge	rest-01	location	in-front-of	r2	i	
# ::edge	in-front-of	op1	building	i	b2	
# ::edge	building	ARG0-of	have-03	b2	h	
# ::edge	have-03	ARG1	stair	h	s	
(r2 / rest-01
    :ARG1 (a / and
        :ARG1-of (c4 / connect-01
            :ARG2 (t2 / train))
        :op1 (c2 / car
            :mod (c / caboose)
            :mod (b / blue))
        :op2 (c3 / car
            :ARG1-of (y / yellow-02)
            :mod c))
    :ARG2 (t / track
        :mod (r / railroad))
    :location (i / in-front-of
        :op1 (b2 / building
            :ARG0-of (h / have-03
                :ARG1 (s / stair)))))
