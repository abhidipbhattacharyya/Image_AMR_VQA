# ::tok Two birds making noise on a lower branch while another sits higher up alone .
# ::node	0	2	0-1
# ::node	b	bird	1-2
# ::node	b2	bird	1-2
# ::node	m	make-01	2-3
# ::node	n	noise	3-4
# ::node	l	low-04	6-7
# ::node	h	have-degree-91	6-7
# ::node	m2	more	6-7
# ::node	b3	branch	7-8
# ::node	c	contrast-01	8-9
# ::node	a2	another	9-10
# ::node	s	sit-01	10-11
# ::node	h3	high-02	11-12
# ::node	h2	have-degree-91	11-12
# ::node	m3	more	11-12
# ::node	u	up	12-13
# ::node	a	alone	13-14
# ::root	c	contrast-01
# ::edge	bird	quant	2	b	0	
# ::edge	make-01	ARG0	bird	m	b	
# ::edge	make-01	ARG1	noise	m	n	
# ::edge	low-04	ARG2-of	have-degree-91	l	h	
# ::edge	have-degree-91	ARG3	more	h	m2	
# ::edge	have-degree-91	ARG1	branch	h	b3	
# ::edge	branch	ARG1-of	low-04	b3	l	
# ::edge	make-01	location	branch	m	b3	
# ::edge	contrast-01	ARG1	make-01	c	m	
# ::edge	bird	mod	another	b2	a2	
# ::edge	contrast-01	ARG2	sit-01	c	s	
# ::edge	sit-01	ARG1	bird	s	b2	
# ::edge	sit-01	ARG2	high-02	s	h3	
# ::edge	high-02	ARG2-of	have-degree-91	h3	h2	
# ::edge	have-degree-91	ARG1	bird	h2	b2	
# ::edge	have-degree-91	ARG3	more	h2	m3	
# ::edge	high-02	location	up	h3	u	
# ::edge	sit-01	mod	alone	s	a	
(c / contrast-01
    :ARG1 (m / make-01
        :ARG0 (b / bird
            :quant 2)
        :ARG1 (n / noise)
        :location (b3 / branch
            :ARG1-of (l / low-04
                :ARG2-of (h / have-degree-91
                    :ARG1 b3
                    :ARG3 (m2 / more)))))
    :ARG2 (s / sit-01
        :ARG1 (b2 / bird
            :mod (a2 / another))
        :ARG2 (h3 / high-02
            :ARG2-of (h2 / have-degree-91
                :ARG1 b2
                :ARG3 (m3 / more))
            :location (u / up))
        :mod (a / alone)))
