# ::tok A gray and black raven sits on top of the car , looking as if he could talk if he wanted to .
# ::node	g	gray-02	1-2
# ::node	b	black-04	3-4
# ::node	r	raven	4-5
# ::node	s	sit-01	5-6
# ::node	t2	top	7-8
# ::node	c	car	10-11
# ::node	a	and	11-12
# ::node	l	look-02	12-13
# ::node	p	possible-01	16-17
# ::node	t	talk-01	17-18
# ::node	w	want-01	20-21
# ::root	a	and
# ::edge	raven	ARG1-of	black-04	r	b	
# ::edge	raven	ARG1-of	gray-02	r	g	
# ::edge	sit-01	ARG1	raven	s	r	
# ::edge	sit-01	ARG2	top	s	t2	
# ::edge	top	op1	car	t2	c	
# ::edge	and	op1	sit-01	a	s	
# ::edge	and	op2	look-02	a	l	
# ::edge	look-02	ARG0	raven	l	r	
# ::edge	look-02	ARG1	possible-01	l	p	
# ::edge	possible-01	ARG1	talk-01	p	t	
# ::edge	talk-01	ARG0	raven	t	r	
# ::edge	want-01	ARG1	talk-01	w	t	
# ::edge	possible-01	condition	want-01	p	w	
# ::edge	want-01	ARG0	raven	w	r	
(a / and
    :op1 (s / sit-01
        :ARG1 (r / raven
            :ARG1-of (b / black-04)
            :ARG1-of (g / gray-02))
        :ARG2 (t2 / top
            :op1 (c / car)))
    :op2 (l / look-02
        :ARG0 r
        :ARG1 (p / possible-01
            :ARG1 (t / talk-01
                :ARG0 r)
            :condition (w / want-01
                :ARG0 r
                :ARG1 t))))
