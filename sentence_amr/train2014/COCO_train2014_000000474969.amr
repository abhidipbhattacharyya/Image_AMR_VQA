# ::tok Two cats , one white and brown , one black , laying on a white sheet .
# ::node	2	2	0-1
# ::node	c	cat	1-2
# ::node	c2	cat	1-2
# ::node	c3	cat	1-2
# ::node	i	include-91	3-4
# ::node	i2	include-91	3-4
# ::node	w	white-03	4-5
# ::node	g	green-02	6-7
# ::node	0	1	8-9
# ::node	1	1	8-9
# ::node	b	black-04	9-10
# ::node	l	lay-01	11-12
# ::node	w2	white-03	14-15
# ::node	s	sheet	15-16
# ::root	l	lay-01
# ::edge	cat	quant	2	c	2	
# ::edge	include-91	ARG1	cat	i	c	
# ::edge	cat	ARG2-of	include-91	c	i	
# ::edge	include-91	ARG1	cat	i2	c3	
# ::edge	cat	ARG2-of	include-91	c	i2	
# ::edge	cat	ARG1-of	white-03	c2	w	
# ::edge	cat	ARG1-of	green-02	c2	g	
# ::edge	cat	quant	1	c2	0	
# ::edge	cat	quant	1	c3	1	
# ::edge	cat	ARG1-of	black-04	c3	b	
# ::edge	lay-01	ARG1	cat	l	c	
# ::edge	sheet	ARG1-of	white-03	s	w2	
# ::edge	lay-01	ARG2	sheet	l	s	
# ::edge	lay-01	rel	cat	l	c2	
(l / lay-01
    :ARG1 (c / cat
        :quant 2
        :ARG2-of (i / include-91
            :ARG1 c)
        :ARG2-of (i2 / include-91
            :ARG1 (c3 / cat
                :quant 1
                :ARG1-of (b / black-04))))
    :ARG2 (s / sheet
        :ARG1-of (w2 / white-03))
    :rel (c2 / cat
        :quant 1
        :ARG1-of (w / white-03)
        :ARG1-of (g / green-02)))
