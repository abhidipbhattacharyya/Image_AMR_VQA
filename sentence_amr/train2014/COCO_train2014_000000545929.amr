# ::tok The happy couple holding the video game controllers have a contest to see which can make the stupidest looking facial expression .
# ::node	h	happy-01	1-2
# ::node	c3	couple	2-3
# ::node	h4	hold-01	3-4
# ::node	v	video	5-6
# ::node	g	game	6-7
# ::node	p	person	7-8
# ::node	c2	control-01	7-8
# ::node	h2	have-04	8-9
# ::node	c	contest-02	10-11
# ::node	s	see-01	12-13
# ::node	p2	person	13-14
# ::node	p3	possible-01	14-15
# ::node	m	make-02	15-16
# ::node	h3	have-degree-91	17-18
# ::node	s2	stupid	17-18
# ::node	m2	most	17-18
# ::node	l	look-02	18-19
# ::node	f	face	19-20
# ::node	e	expression	20-21
# ::root	h2	have-04
# ::edge	couple	ARG1-of	happy-01	c3	h	
# ::edge	couple	ARG0-of	hold-01	c3	h4	
# ::edge	game	mod	video	g	v	
# ::edge	hold-01	ARG1	person	h4	p	
# ::edge	person	ARG0-of	control-01	p	c2	
# ::edge	control-01	ARG1	game	c2	g	
# ::edge	have-04	ARG0	couple	h2	c3	
# ::edge	have-04	ARG1	contest-02	h2	c	
# ::edge	contest-02	ARG4	person	c	p	
# ::edge	contest-02	ARG2	see-01	c	s	
# ::edge	see-01	ARG0	couple	s	c3	
# ::edge	see-01	ARG1	person	s	p2	
# ::edge	make-02	ARG1-of	possible-01	m	p3	
# ::edge	person	ARG0-of	make-02	p2	m	
# ::edge	have-degree-91	ARG2	stupid	h3	s2	
# ::edge	have-degree-91	ARG3	most	h3	m2	
# ::edge	look-02	ARG1	have-degree-91	l	h3	
# ::edge	expression	location	face	e	f	
# ::edge	expression	ARG0-of	look-02	e	l	
# ::edge	make-02	ARG1	expression	m	e	
(h2 / have-04
    :ARG0 (c3 / couple
        :ARG0-of (h4 / hold-01
            :ARG1 (p / person
                :ARG0-of (c2 / control-01
                    :ARG1 (g / game
                        :mod (v / video)))))
        :ARG1-of (h / happy-01))
    :ARG1 (c / contest-02
        :ARG2 (s / see-01
            :ARG0 c3
            :ARG1 (p2 / person
                :ARG0-of (m / make-02
                    :ARG1 (e / expression
                        :ARG0-of (l / look-02
                            :ARG1 (h3 / have-degree-91
                                :ARG2 (s2 / stupid)
                                :ARG3 (m2 / most)))
                        :location (f / face))
                    :ARG1-of (p3 / possible-01))))
        :ARG4 p))
