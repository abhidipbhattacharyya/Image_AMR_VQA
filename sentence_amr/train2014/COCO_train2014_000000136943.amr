# ::tok Two motorcycles parked what a person is sitting on a third motorcycle .
# ::node	0	2	0-1
# ::node	m	motorcycle	1-2
# ::node	p	park-01	2-3
# ::node	t	thing	3-4
# ::node	p2	person	5-6
# ::node	s	sit-01	7-8
# ::node	o	ordinal-entity	10-11
# ::node	1	3	10-11
# ::node	m2	motorcycle	11-12
# ::node	a	and	12-13
# ::root	a	and
# ::edge	motorcycle	quant	2	m	0	
# ::edge	park-01	ARG1	motorcycle	p	m	
# ::edge	sit-01	ARG1	person	s	p2	
# ::edge	ordinal-entity	value	3	o	1	
# ::edge	motorcycle	ord	ordinal-entity	m2	o	
# ::edge	sit-01	ARG2	motorcycle	s	m2	
# ::edge	and	op2	sit-01	a	s	
# ::edge	and	op1	park-01	a	p	
# ::edge	and	rel	thing	a	t	
(a / and
    :op1 (p / park-01
        :ARG1 (m / motorcycle
            :quant 2))
    :op2 (s / sit-01
        :ARG1 (p2 / person)
        :ARG2 (m2 / motorcycle
            :ord (o / ordinal-entity
                :value 3)))
    :rel (t / thing))
