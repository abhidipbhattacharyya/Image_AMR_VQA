# ::tok The food processor has many attachments , and needs to be assembled before use .
# ::node	f	food	1-2
# ::node	t	thing	2-3
# ::node	p	process-01	2-3
# ::node	h	have-03	3-4
# ::node	m	many	4-5
# ::node	a3	attach-01	5-6
# ::node	a	and	7-8
# ::node	n	need-01	8-9
# ::node	a2	assemble-01	11-12
# ::node	b	before	12-13
# ::node	u	use-01	13-14
# ::root	a	and
# ::edge	thing	ARG0-of	process-01	t	p	
# ::edge	process-01	ARG1	food	p	f	
# ::edge	have-03	ARG0	thing	h	t	
# ::edge	attach-01	quant	many	a3	m	
# ::edge	have-03	ARG1	attach-01	h	a3	
# ::edge	attach-01	ARG1	thing	a3	t	
# ::edge	and	op1	have-03	a	h	
# ::edge	and	op2	need-01	a	n	
# ::edge	need-01	ARG1	assemble-01	n	a2	
# ::edge	assemble-01	ARG1	thing	a2	t	
# ::edge	assemble-01	time	before	a2	b	
# ::edge	before	op1	use-01	b	u	
# ::edge	use-01	ARG1	thing	u	t	
(a / and
    :op1 (h / have-03
        :ARG0 (t / thing
            :ARG0-of (p / process-01
                :ARG1 (f / food)))
        :ARG1 (a3 / attach-01
            :quant (m / many)
            :ARG1 t))
    :op2 (n / need-01
        :ARG1 (a2 / assemble-01
            :ARG1 t
            :time (b / before
                :op1 (u / use-01
                    :ARG1 t)))))
