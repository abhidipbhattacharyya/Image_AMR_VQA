# ::tok This shows a young man 's jump as continuous sequence of actions .
# ::node	t	this	0-1
# ::node	s2	show-01	1-2
# ::node	y	young	3-4
# ::node	m	man	4-5
# ::node	j	jump-03	6-7
# ::node	c	continue-01	8-9
# ::node	s	sequence-01	9-10
# ::node	a	act-02	11-12
# ::root	s2	show-01
# ::edge	show-01	ARG0	this	s2	t	
# ::edge	man	mod	young	m	y	
# ::edge	jump-03	ARG0	man	j	m	
# ::edge	show-01	ARG1	jump-03	s2	j	
# ::edge	sequence-01	ARG1-of	continue-01	s	c	
# ::edge	show-01	ARG3	sequence-01	s2	s	
# ::edge	sequence-01	ARG1	act-02	s	a	
(s2 / show-01
    :ARG0 (t / this)
    :ARG1 (j / jump-03
        :ARG0 (m / man
            :mod (y / young)))
    :ARG3 (s / sequence-01
        :ARG1 (a / act-02)
        :ARG1-of (c / continue-01)))
