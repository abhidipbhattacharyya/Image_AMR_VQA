# ::tok A red car is going through an area where there is a red stop sign that says stop only if turning right .
# ::node	r	red-02	1-2
# ::node	c	car	2-3
# ::node	g	go-02	4-5
# ::node	a	area	7-8
# ::node	r2	red-02	12-13
# ::node	s3	stop-01	13-14
# ::node	s2	signal-07	14-15
# ::node	s	say-01	16-17
# ::node	s4	stop-01	17-18
# ::node	o	only	18-19
# ::node	h	have-condition-91	19-20
# ::node	t	turn-01	20-21
# ::node	r3	right-04	21-22
# ::root	g	go-02
# ::edge	car	ARG1-of	red-02	c	r	
# ::edge	go-02	ARG0	car	g	c	
# ::edge	go-02	path	area	g	a	
# ::edge	signal-07	ARG1	stop-01	s2	s3	
# ::edge	signal-07	ARG1-of	red-02	s2	r2	
# ::edge	area	location-of	signal-07	a	s2	
# ::edge	signal-07	ARG0-of	say-01	s2	s	
# ::edge	say-01	ARG1	stop-01	s	s4	
# ::edge	have-condition-91	mod	only	h	o	
# ::edge	stop-01	ARG1-of	have-condition-91	s4	h	
# ::edge	have-condition-91	ARG2	turn-01	h	t	
# ::edge	turn-01	ARG0	car	t	c	
# ::edge	turn-01	ARG1-of	right-04	t	r3	
(g / go-02
    :ARG0 (c / car
        :ARG1-of (r / red-02))
    :path (a / area
        :location-of (s2 / signal-07
            :ARG0-of (s / say-01
                :ARG1 (s4 / stop-01
                    :ARG1-of (h / have-condition-91
                        :ARG2 (t / turn-01
                            :ARG0 c
                            :ARG1-of (r3 / right-04))
                        :mod (o / only))))
            :ARG1 (s3 / stop-01)
            :ARG1-of (r2 / red-02))))
