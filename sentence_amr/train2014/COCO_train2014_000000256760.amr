# ::tok A traffic light indicating that cars going straight or to the right may proceed .
# ::node	t	traffic	1-2
# ::node	l	light	2-3
# ::node	i	indicate-01	3-4
# ::node	c	car	5-6
# ::node	c2	car	5-6
# ::node	g	go-02	6-7
# ::node	g2	go-06	6-7
# ::node	s	straight-04	7-8
# ::node	o	or	8-9
# ::node	r	right-04	11-12
# ::node	p	permit-01	12-13
# ::node	p2	proceed-01	13-14
# ::root	i	indicate-01
# ::edge	light	mod	traffic	l	t	
# ::edge	indicate-01	ARG0	light	i	l	
# ::edge	car	ARG0-of	go-02	c	g	
# ::edge	car	ARG0-of	go-06	c2	g2	
# ::edge	go-02	ARG1-of	straight-04	g	s	
# ::edge	or	op2	car	o	c2	
# ::edge	or	op1	car	o	c	
# ::edge	go-06	ARG1-of	right-04	g2	r	
# ::edge	indicate-01	ARG1	permit-01	i	p	
# ::edge	permit-01	ARG1	proceed-01	p	p2	
# ::edge	proceed-01	ARG0	or	p2	o	
(i / indicate-01
    :ARG0 (l / light
        :mod (t / traffic))
    :ARG1 (p / permit-01
        :ARG1 (p2 / proceed-01
            :ARG0 (o / or
                :op1 (c / car
                    :ARG0-of (g / go-02
                        :ARG1-of (s / straight-04)))
                :op2 (c2 / car
                    :ARG0-of (g2 / go-06
                        :ARG1-of (r / right-04)))))))
