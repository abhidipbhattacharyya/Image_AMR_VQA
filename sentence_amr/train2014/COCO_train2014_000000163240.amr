# ::tok a train coming down the tracks with trees on the sides
# ::node	t2	train	1-2
# ::node	c	come-01	2-3
# ::node	d	down	3-4
# ::node	t	track	5-6
# ::node	h	have-03	6-7
# ::node	t3	tree	7-8
# ::node	s	side	10-11
# ::root	c	come-01
# ::edge	come-01	ARG1	train	c	t2	
# ::edge	come-01	direction	down	c	d	
# ::edge	come-01	path	track	c	t	
# ::edge	train	ARG0-of	have-03	t2	h	
# ::edge	have-03	ARG1	tree	h	t3	
# ::edge	tree	location	side	t3	s	
# ::edge	track	part	side	t	s	
(c / come-01
    :ARG1 (t2 / train
        :ARG0-of (h / have-03
            :ARG1 (t3 / tree
                :location (s / side))))
    :direction (d / down)
    :path (t / track
        :part s))
