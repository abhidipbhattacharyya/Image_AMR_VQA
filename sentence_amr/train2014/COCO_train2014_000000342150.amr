# ::tok two casts and a dog looking outside through a glass window / door .
# ::node	0	2	0-1
# ::node	c	cast-03	1-2
# ::node	a	and	2-3
# ::node	d	dog	4-5
# ::node	l	look-01	5-6
# ::node	o	outside	6-7
# ::node	g	glass	9-10
# ::node	w	window	10-11
# ::node	s	slash	11-12
# ::node	d2	door	12-13
# ::root	a	and
# ::edge	cast-03	quant	2	c	0	
# ::edge	and	op1	cast-03	a	c	
# ::edge	look-01	ARG0	dog	l	d	
# ::edge	and	op2	look-01	a	l	
# ::edge	look-01	ARG1	outside	l	o	
# ::edge	slash	op1	window	s	w	
# ::edge	slash	consist-of	glass	s	g	
# ::edge	look-01	path	slash	l	s	
# ::edge	slash	op2	door	s	d2	
(a / and
    :op1 (c / cast-03
        :quant 2)
    :op2 (l / look-01
        :ARG0 (d / dog)
        :ARG1 (o / outside)
        :path (s / slash
            :consist-of (g / glass)
            :op1 (w / window)
            :op2 (d2 / door))))
