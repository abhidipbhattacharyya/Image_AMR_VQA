# ::tok Two slices of pizza on each black disposable plate with disposable utensils are on tables for diners .
# ::node	0	2	0-1
# ::node	s	slice	1-2
# ::node	p2	pizza	3-4
# ::node	e	each	5-6
# ::node	b2	black-04	6-7
# ::node	p3	plate	8-9
# ::node	d2	dispose-01	10-11
# ::node	p4	possible-01	10-11
# ::node	1	8	11-12
# ::node	b	be-located-at-91	13-14
# ::node	t	table-01	14-15
# ::node	p	person	16-17
# ::node	d	dine-01	16-17
# ::root	b	be-located-at-91
# ::edge	slice	quant	2	s	0	
# ::edge	slice	consist-of	pizza	s	p2	
# ::edge	plate	ARG1-of	black-04	p3	b2	
# ::edge	plate	mod	each	p3	e	
# ::edge	slice	location	plate	s	p3	
# ::edge	plate	ARG1-of	dispose-01	p3	d2	
# ::edge	dispose-01	ARG1-of	possible-01	d2	p4	
# ::edge	plate	quant	8	p3	1	
# ::edge	be-located-at-91	ARG1	slice	b	s	
# ::edge	be-located-at-91	ARG2	table-01	b	t	
# ::edge	table-01	ARG0	person	t	p	
# ::edge	person	ARG0-of	dine-01	p	d	
(b / be-located-at-91
    :ARG1 (s / slice
        :quant 2
        :consist-of (p2 / pizza)
        :location (p3 / plate
            :quant 8
            :ARG1-of (b2 / black-04)
            :ARG1-of (d2 / dispose-01
                :ARG1-of (p4 / possible-01))
            :mod (e / each)))
    :ARG2 (t / table-01
        :ARG0 (p / person
            :ARG0-of (d / dine-01))))
