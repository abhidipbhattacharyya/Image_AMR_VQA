# ::tok A man with a luggage case that is jumping in the air .
# ::node	m	man	1-2
# ::node	h	have-03	2-3
# ::node	l	luggage	4-5
# ::node	c	case	5-6
# ::node	j	jump-03	8-9
# ::node	a	air	11-12
# ::root	m	man
# ::edge	man	ARG0-of	have-03	m	h	
# ::edge	case	mod	luggage	c	l	
# ::edge	have-03	ARG1	case	h	c	
# ::edge	case	ARG0-of	jump-03	c	j	
# ::edge	jump-03	destination	air	j	a	
(m / man
    :ARG0-of (h / have-03
        :ARG1 (c / case
            :ARG0-of (j / jump-03
                :destination (a / air))
            :mod (l / luggage))))
