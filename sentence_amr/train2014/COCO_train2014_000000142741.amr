# ::tok A train is traveling down the tracks with another getting closer .
# ::node	t2	train	1-2
# ::node	t3	train	1-2
# ::node	t4	travel-01	3-4
# ::node	d	down	4-5
# ::node	t	track	6-7
# ::node	a	and	7-8
# ::node	a2	another	8-9
# ::node	g	get-05	9-10
# ::node	c	close-10	10-11
# ::node	h	have-degree-91	10-11
# ::node	m	more	10-11
# ::root	a	and
# ::edge	travel-01	ARG0	train	t4	t2	
# ::edge	travel-01	direction	down	t4	d	
# ::edge	travel-01	path	track	t4	t	
# ::edge	and	op1	travel-01	a	t4	
# ::edge	train	mod	another	t3	a2	
# ::edge	and	op2	get-05	a	g	
# ::edge	get-05	ARG1	train	g	t3	
# ::edge	get-05	ARG2	close-10	g	c	
# ::edge	close-10	ARG1	train	c	t3	
# ::edge	close-10	ARG2-of	have-degree-91	c	h	
# ::edge	have-degree-91	ARG1	train	h	t3	
# ::edge	have-degree-91	ARG3	more	h	m	
(a / and
    :op1 (t4 / travel-01
        :ARG0 (t2 / train)
        :direction (d / down)
        :path (t / track))
    :op2 (g / get-05
        :ARG1 (t3 / train
            :mod (a2 / another))
        :ARG2 (c / close-10
            :ARG1 t3
            :ARG2-of (h / have-degree-91
                :ARG1 t3
                :ARG3 (m / more)))))
