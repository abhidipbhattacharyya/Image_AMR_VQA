# ::tok An elephant with a chain around
# ::node	e	elephant	1-2
# ::node	c	chain	4-5
# ::node	a	around	5-6
# ::root	e	elephant
# ::edge	around	op1	chain	a	c	
# ::edge	elephant	manner	around	e	a	
(e / elephant
    :manner (a / around
        :op1 (c / chain)))


# ::tok it 's neck eating from some tree branches .
# ::node	i	it	0-1
# ::node	n	neck	2-3
# ::node	e	eat-01	3-4
# ::node	s	some	5-6
# ::node	t	tree	6-7
# ::node	b	branch	7-8
# ::root	e	eat-01
# ::edge	neck	part-of	it	n	i	
# ::edge	eat-01	ARG0	neck	e	n	
# ::edge	branch	part-of	tree	b	t	
# ::edge	branch	quant	some	b	s	
# ::edge	eat-01	ARG2	branch	e	b	
(e / eat-01
    :ARG0 (n / neck
        :part-of (i / it))
    :ARG2 (b / branch
        :quant (s / some)
        :part-of (t / tree)))
