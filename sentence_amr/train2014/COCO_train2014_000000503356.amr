# ::tok A set of traffic lights showing green next to a sign that says ' no turn on red '
# ::node	s2	set	1-2
# ::node	t	traffic	3-4
# ::node	l	light	4-5
# ::node	s3	show-01	5-6
# ::node	g	green-02	6-7
# ::node	n	next-to	7-8
# ::node	s4	sign	10-11
# ::node	s	say-01	12-13
# ::node	y	you	14-15
# ::node	1	imperative	14-15
# ::node	0	-	14-15
# ::node	t2	turn-01	15-16
# ::node	r	red-02	17-18
# ::root	s3	show-01
# ::edge	light	mod	traffic	l	t	
# ::edge	set	consist-of	light	s2	l	
# ::edge	show-01	ARG0	set	s3	s2	
# ::edge	show-01	ARG1	green-02	s3	g	
# ::edge	show-01	location	next-to	s3	n	
# ::edge	next-to	op1	sign	n	s4	
# ::edge	sign	ARG0-of	say-01	s4	s	
# ::edge	turn-01	polarity	-	t2	0	
# ::edge	turn-01	mode	imperative	t2	1	
# ::edge	turn-01	ARG0	you	t2	y	
# ::edge	say-01	ARG1	turn-01	s	t2	
# ::edge	turn-01	manner	red-02	t2	r	
(s3 / show-01
    :ARG0 (s2 / set
        :consist-of (l / light
            :mod (t / traffic)))
    :ARG1 (g / green-02)
    :location (n / next-to
        :op1 (s4 / sign
            :ARG0-of (s / say-01
                :ARG1 (t2 / turn-01
                    :ARG0 (y / you)
                    :manner (r / red-02)
                    :mode imperative
                    :polarity -)))))
