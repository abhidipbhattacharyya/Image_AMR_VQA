# ::tok three different trains one is green and silver and the other two are orange and silver
# ::node	2	3	0-1
# ::node	d	differ-02	1-2
# ::node	t	train	2-3
# ::node	t2	train	2-3
# ::node	t3	train	2-3
# ::node	0	1	3-4
# ::node	g	green-02	5-6
# ::node	a	and	6-7
# ::node	s	silver	7-8
# ::node	a2	and	8-9
# ::node	o2	other	10-11
# ::node	1	2	11-12
# ::node	o	orange	13-14
# ::node	s2	silver	15-16
# ::root	a2	and
# ::edge	train	ARG1-of	differ-02	t	d	
# ::edge	train	quant	3	t	2	
# ::edge	train	quant	1	t2	0	
# ::edge	train	ARG1-of	green-02	t2	g	
# ::edge	and	op2	train	a	t3	
# ::edge	and	op1	train	a	t2	
# ::edge	train	mod	silver	t3	s	
# ::edge	and	op1	and	a2	a	
# ::edge	train	mod	other	t3	o2	
# ::edge	train	quant	2	t3	1	
# ::edge	train	mod	orange	t3	o	
# ::edge	train	mod	silver	t3	s2	
# ::edge	and	rel	train	a2	t	
(a2 / and
    :op1 (a / and
        :op1 (t2 / train
            :quant 1
            :ARG1-of (g / green-02))
        :op2 (t3 / train
            :quant 2
            :mod (s / silver)
            :mod (o2 / other)
            :mod (o / orange)
            :mod (s2 / silver)))
    :rel (t / train
        :quant 3
        :ARG1-of (d / differ-02)))
