# ::tok A man and his children ride a miniature train in front of two older men riding the same train .
# ::node	m	man	1-2
# ::node	a	and	2-3
# ::node	p	person	3-4
# ::node	h2	have-rel-role-91	4-5
# ::node	c	child	4-5
# ::node	r	ride-01	5-6
# ::node	m3	miniature	7-8
# ::node	t	train	8-9
# ::node	i	in-front-of	10-11
# ::node	0	2	12-13
# ::node	h	have-degree-91	13-14
# ::node	o	old	13-14
# ::node	m4	more	13-14
# ::node	m2	man	14-15
# ::node	r2	ride-01	15-16
# ::root	r	ride-01
# ::edge	and	op1	man	a	m	
# ::edge	and	op2	person	a	p	
# ::edge	person	ARG0-of	have-rel-role-91	p	h2	
# ::edge	have-rel-role-91	ARG1	man	h2	m	
# ::edge	have-rel-role-91	ARG2	child	h2	c	
# ::edge	ride-01	ARG0	and	r	a	
# ::edge	train	mod	miniature	t	m3	
# ::edge	ride-01	ARG1	train	r	t	
# ::edge	ride-01	location	in-front-of	r	i	
# ::edge	have-degree-91	ARG2	old	h	o	
# ::edge	have-degree-91	ARG3	more	h	m4	
# ::edge	man	ARG1-of	have-degree-91	m2	h	
# ::edge	man	quant	2	m2	0	
# ::edge	in-front-of	op1	man	i	m2	
# ::edge	man	ARG0-of	ride-01	m2	r2	
# ::edge	ride-01	ARG1	train	r2	t	
(r / ride-01
    :ARG0 (a / and
        :op1 (m / man)
        :op2 (p / person
            :ARG0-of (h2 / have-rel-role-91
                :ARG1 m
                :ARG2 (c / child))))
    :ARG1 (t / train
        :mod (m3 / miniature))
    :location (i / in-front-of
        :op1 (m2 / man
            :quant 2
            :ARG0-of (r2 / ride-01
                :ARG1 t)
            :ARG1-of (h / have-degree-91
                :ARG2 (o / old)
                :ARG3 (m4 / more)))))
