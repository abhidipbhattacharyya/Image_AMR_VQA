# ::tok Someone is getting ready to cross the tracks so the train must not be moving .
# ::node	s	someone	0-1
# ::node	r	ready-01	3-4
# ::node	c2	cross-02	5-6
# ::node	t	track	7-8
# ::node	c	cause-01	8-9
# ::node	t2	train	10-11
# ::node	i	infer-01	11-12
# ::node	0	-	12-13
# ::node	m	move-01	14-15
# ::root	r	ready-01
# ::edge	ready-01	ARG1	someone	r	s	
# ::edge	ready-01	ARG0	someone	r	s	
# ::edge	ready-01	ARG2	cross-02	r	c2	
# ::edge	cross-02	ARG0	someone	c2	s	
# ::edge	cross-02	ARG1	track	c2	t	
# ::edge	ready-01	ARG0-of	cause-01	r	c	
# ::edge	cause-01	ARG1	infer-01	c	i	
# ::edge	move-01	polarity	-	m	0	
# ::edge	infer-01	ARG1	move-01	i	m	
# ::edge	move-01	ARG0	train	m	t2	
(r / ready-01
    :ARG0 (s / someone)
    :ARG0-of (c / cause-01
        :ARG1 (i / infer-01
            :ARG1 (m / move-01
                :ARG0 (t2 / train)
                :polarity -)))
    :ARG1 s
    :ARG2 (c2 / cross-02
        :ARG0 s
        :ARG1 (t / track)))
