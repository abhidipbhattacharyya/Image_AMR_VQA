# ::tok One zebra is laying down and another zebra is standing up .
# ::node	0	1	0-1
# ::node	z	zebra	1-2
# ::node	l	lay-01	3-4
# ::node	d	down	4-5
# ::node	a	and	5-6
# ::node	a2	another	6-7
# ::node	z2	zebra	7-8
# ::node	s	stand-up-07	9-10
# ::root	a	and
# ::edge	zebra	quant	1	z	0	
# ::edge	lay-01	ARG1	zebra	l	z	
# ::edge	lay-01	ARG2	down	l	d	
# ::edge	and	op1	lay-01	a	l	
# ::edge	zebra	mod	another	z2	a2	
# ::edge	stand-up-07	ARG1	zebra	s	z2	
# ::edge	and	op2	stand-up-07	a	s	
(a / and
    :op1 (l / lay-01
        :ARG1 (z / zebra
            :quant 1)
        :ARG2 (d / down))
    :op2 (s / stand-up-07
        :ARG1 (z2 / zebra
            :mod (a2 / another))))
