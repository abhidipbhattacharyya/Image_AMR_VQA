# ::tok A table is covered with breakfast foods , one person is having bacon eggs and toast , another has pancakes with a side of fruit .
# ::node	t	table	1-2
# ::node	c	cover-02	3-4
# ::node	b2	breakfast-01	5-6
# ::node	f	food	6-7
# ::node	a	and	7-8
# ::node	o	one	8-9
# ::node	p	person	9-10
# ::node	p2	person	9-10
# ::node	h2	have-06	11-12
# ::node	b	bacon	12-13
# ::node	e	egg	13-14
# ::node	a2	and	14-15
# ::node	t2	toast	15-16
# ::node	a3	another	17-18
# ::node	h	have-03	18-19
# ::node	e2	egg	19-20
# ::node	s	side	22-23
# ::node	f2	fruit	24-25
# ::root	a	and
# ::edge	cover-02	ARG1	table	c	t	
# ::edge	food	ARG1-of	breakfast-01	f	b2	
# ::edge	cover-02	ARG2	food	c	f	
# ::edge	and	op1	cover-02	a	c	
# ::edge	person	quant	one	p	o	
# ::edge	have-06	ARG0	person	h2	p	
# ::edge	and	op2	have-06	a	h2	
# ::edge	egg	mod	bacon	e	b	
# ::edge	and	op1	egg	a2	e	
# ::edge	have-06	ARG1	and	h2	a2	
# ::edge	and	op2	toast	a2	t2	
# ::edge	person	mod	another	p2	a3	
# ::edge	have-03	ARG0	person	h	p2	
# ::edge	and	op3	have-03	a	h	
# ::edge	have-03	ARG1	egg	h	e2	
# ::edge	egg	prep-with	side	e2	s	
# ::edge	side	consist-of	fruit	s	f2	
(a / and
    :op1 (c / cover-02
        :ARG1 (t / table)
        :ARG2 (f / food
            :ARG1-of (b2 / breakfast-01)))
    :op2 (h2 / have-06
        :ARG0 (p / person
            :quant (o / one))
        :ARG1 (a2 / and
            :op1 (e / egg
                :mod (b / bacon))
            :op2 (t2 / toast)))
    :op3 (h / have-03
        :ARG0 (p2 / person
            :mod (a3 / another))
        :ARG1 (e2 / egg
            :prep-with (s / side
                :consist-of (f2 / fruit)))))
