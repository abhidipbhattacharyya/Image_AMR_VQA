# ::tok Two men one wearing their hat backwards has his tennis racket up and the second man is wearing a leg brace is standing like he is ready to play tennis too .
# ::node	0	2	0-1
# ::node	m	man	1-2
# ::node	w	wear-01	3-4
# ::node	h	hat	5-6
# ::node	b	backwards	6-7
# ::node	h2	have-03	7-8
# ::node	t	tennis	9-10
# ::node	r	racket	10-11
# ::node	u	up	11-12
# ::node	a	and	12-13
# ::node	o	ordinal-entity	14-15
# ::node	1	2	14-15
# ::node	m2	man	15-16
# ::node	w2	wear-01	17-18
# ::node	l	leg	19-20
# ::node	b2	brace	20-21
# ::node	s	stand-01	22-23
# ::node	r3	resemble-01	23-24
# ::node	r2	ready-02	26-27
# ::node	p	play-01	28-29
# ::node	t2	too	30-31
# ::root	a	and
# ::edge	man	quant	2	m	0	
# ::edge	man	ARG0-of	wear-01	m	w	
# ::edge	wear-01	ARG1	hat	w	h	
# ::edge	hat	poss	man	h	m	
# ::edge	wear-01	direction	backwards	w	b	
# ::edge	man	ARG0-of	have-03	m	h2	
# ::edge	racket	mod	tennis	r	t	
# ::edge	have-03	ARG1	racket	h2	r	
# ::edge	racket	poss	man	r	m	
# ::edge	up	domain	racket	u	r	
# ::edge	have-03	manner	up	h2	u	
# ::edge	and	op1	man	a	m	
# ::edge	ordinal-entity	value	2	o	1	
# ::edge	man	ord	ordinal-entity	m2	o	
# ::edge	man	ARG0-of	wear-01	m2	w2	
# ::edge	brace	mod	leg	b2	l	
# ::edge	wear-01	ARG1	brace	w2	b2	
# ::edge	stand-01	ARG1	man	s	m2	
# ::edge	and	op2	stand-01	a	s	
# ::edge	stand-01	ARG1-of	resemble-01	s	r3	
# ::edge	resemble-01	ARG2	ready-02	r3	r2	
# ::edge	ready-02	ARG1	man	r2	m2	
# ::edge	ready-02	ARG2	play-01	r2	p	
# ::edge	play-01	ARG0	man	p	m2	
# ::edge	play-01	ARG2	tennis	p	t	
# ::edge	ready-02	mod	too	r2	t2	
(a / and
    :op1 (m / man
        :quant 2
        :ARG0-of (w / wear-01
            :ARG1 (h / hat
                :poss m)
            :direction (b / backwards))
        :ARG0-of (h2 / have-03
            :ARG1 (r / racket
                :mod (t / tennis)
                :poss m)
            :manner (u / up
                :domain r)))
    :op2 (s / stand-01
        :ARG1 (m2 / man
            :ARG0-of (w2 / wear-01
                :ARG1 (b2 / brace
                    :mod (l / leg)))
            :ord (o / ordinal-entity
                :value 2))
        :ARG1-of (r3 / resemble-01
            :ARG2 (r2 / ready-02
                :ARG1 m2
                :ARG2 (p / play-01
                    :ARG0 m2
                    :ARG2 t)
                :mod (t2 / too)))))
