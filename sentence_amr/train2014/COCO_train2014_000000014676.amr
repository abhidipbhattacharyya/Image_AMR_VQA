# ::tok One diner has eaten one piece of their personal pizza and the person opposite has finished several .
# ::node	0	1	0-1
# ::node	d	diner	1-2
# ::node	e	eat-01	3-4
# ::node	1	1	4-5
# ::node	p3	piece	5-6
# ::node	p2	personal-02	8-9
# ::node	p4	pizza	9-10
# ::node	p5	pizza	9-10
# ::node	a	and	10-11
# ::node	p	person	12-13
# ::node	o	opposite-01	13-14
# ::node	f	finish-01	15-16
# ::node	s	several	16-17
# ::root	a	and
# ::edge	diner	quant	1	d	0	
# ::edge	eat-01	ARG0	diner	e	d	
# ::edge	piece	quant	1	p3	1	
# ::edge	eat-01	ARG1	piece	e	p3	
# ::edge	personal-02	ARG2	diner	p2	d	
# ::edge	pizza	ARG1-of	personal-02	p4	p2	
# ::edge	piece	part-of	pizza	p3	p4	
# ::edge	and	op1	eat-01	a	e	
# ::edge	person	ARG1-of	personal-02	p	p2	
# ::edge	person	ARG1-of	opposite-01	p	o	
# ::edge	opposite-01	ARG2	diner	o	d	
# ::edge	finish-01	ARG0	person	f	p	
# ::edge	and	op2	finish-01	a	f	
# ::edge	finish-01	ARG1	pizza	f	p5	
# ::edge	pizza	quant	several	p5	s	
(a / and
    :op1 (e / eat-01
        :ARG0 (d / diner
            :quant 1)
        :ARG1 (p3 / piece
            :quant 1
            :part-of (p4 / pizza
                :ARG1-of (p2 / personal-02
                    :ARG2 d))))
    :op2 (f / finish-01
        :ARG0 (p / person
            :ARG1-of p2
            :ARG1-of (o / opposite-01
                :ARG2 d))
        :ARG1 (p5 / pizza
            :quant (s / several))))
