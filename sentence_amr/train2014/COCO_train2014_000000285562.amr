# ::tok A green wooden tray containing candy , with green apples , a slice of cake with green icing , a green lollipop and green cupcake .
# ::node	g	green-02	1-2
# ::node	w	wood	2-3
# ::node	t	tray	3-4
# ::node	c3	contain-01	4-5
# ::node	c2	candy	5-6
# ::node	a2	apple	9-10
# ::node	s	slice	12-13
# ::node	c	cake	14-15
# ::node	h	have-03	15-16
# ::node	h2	have-03	15-16
# ::node	i	ice	17-18
# ::node	l	lollipop	21-22
# ::node	a	and	22-23
# ::node	c4	cupcake	24-25
# ::root	c3	contain-01
# ::edge	tray	consist-of	wood	t	w	
# ::edge	tray	ARG1-of	green-02	t	g	
# ::edge	contain-01	ARG0	tray	c3	t	
# ::edge	green-02	ARG1	apple	g	a2	
# ::edge	apple	ARG1-of	green-02	a2	g	
# ::edge	cake	consist-of	slice	c	s	
# ::edge	have-03	ARG1	cake	h	c	
# ::edge	candy	ARG0-of	have-03	c2	h	
# ::edge	cake	ARG0-of	have-03	c	h2	
# ::edge	have-03	ARG1	ice	h2	i	
# ::edge	green-02	ARG1	ice	g	i	
# ::edge	green-02	ARG1	lollipop	g	l	
# ::edge	and	op4	lollipop	a	l	
# ::edge	and	op3	slice	a	s	
# ::edge	and	op2	apple	a	a2	
# ::edge	and	op1	candy	a	c2	
# ::edge	contain-01	ARG1	and	c3	a	
# ::edge	and	op5	cupcake	a	c4	
# ::edge	green-02	ARG1	cupcake	g	c4	
(c3 / contain-01
    :ARG0 (t / tray
        :ARG1-of (g / green-02
            :ARG1 (a2 / apple
                :ARG1-of g)
            :ARG1 (i / ice)
            :ARG1 (l / lollipop)
            :ARG1 (c4 / cupcake))
        :consist-of (w / wood))
    :ARG1 (a / and
        :op1 (c2 / candy
            :ARG0-of (h / have-03
                :ARG1 (c / cake
                    :ARG0-of (h2 / have-03
                        :ARG1 i)
                    :consist-of (s / slice))))
        :op2 a2
        :op3 s
        :op4 l
        :op5 c4))
