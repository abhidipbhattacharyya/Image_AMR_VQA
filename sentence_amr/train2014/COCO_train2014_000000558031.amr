# ::tok They are moving a refrigerator up or down a flight of steps .
# ::node	t	they	0-1
# ::node	m	move-01	2-3
# ::node	r	refrigerator	4-5
# ::node	u	up-03	5-6
# ::node	o	or	6-7
# ::node	d	down-03	7-8
# ::node	f	fly-01	9-10
# ::node	s	step-01	11-12
# ::root	m	move-01
# ::edge	move-01	ARG0	they	m	t	
# ::edge	move-01	ARG1	refrigerator	m	r	
# ::edge	or	op1	up-03	o	u	
# ::edge	move-01	direction	or	m	o	
# ::edge	or	op2	down-03	o	d	
# ::edge	move-01	path	fly-01	m	f	
# ::edge	fly-01	consist-of	step-01	f	s	
(m / move-01
    :ARG0 (t / they)
    :ARG1 (r / refrigerator)
    :direction (o / or
        :op1 (u / up-03)
        :op2 (d / down-03))
    :path (f / fly-01
        :consist-of (s / step-01)))
