# ::tok A throng of people on a bridge by a rock wall and trees are looking over and into an enclosure with two giraffes , both tall enough for their heads to peer over the top of the bridge .
# ::node	t2	throng	1-2
# ::node	p2	person	3-4
# ::node	b	bridge	6-7
# ::node	r	rock	9-10
# ::node	w	wall	10-11
# ::node	a	and	11-12
# ::node	t4	tree	12-13
# ::node	l	look-01	14-15
# ::node	o	over	15-16
# ::node	a2	and	16-17
# ::node	e	enclosure	19-20
# ::node	h	have-03	20-21
# ::node	0	2	21-22
# ::node	g	giraffe	22-23
# ::node	t	tall	25-26
# ::node	h2	have-degree-91	26-27
# ::node	e2	enough	26-27
# ::node	h3	head	29-30
# ::node	p	peer-01	31-32
# ::node	o2	over	32-33
# ::node	t3	top	34-35
# ::root	l	look-01
# ::edge	throng	consist-of	person	t2	p2	
# ::edge	throng	location	bridge	t2	b	
# ::edge	wall	consist-of	rock	w	r	
# ::edge	and	op1	wall	a	w	
# ::edge	bridge	prep-by	and	b	a	
# ::edge	and	op2	tree	a	t4	
# ::edge	look-01	ARG0	throng	l	t2	
# ::edge	over	op1	bridge	o	b	
# ::edge	and	op1	over	a2	o	
# ::edge	look-01	ARG1	and	l	a2	
# ::edge	and	op2	enclosure	a2	e	
# ::edge	enclosure	ARG0-of	have-03	e	h	
# ::edge	giraffe	quant	2	g	0	
# ::edge	have-03	ARG1	giraffe	h	g	
# ::edge	have-degree-91	ARG2	tall	h2	t	
# ::edge	giraffe	ARG1-of	have-degree-91	g	h2	
# ::edge	have-degree-91	ARG3	enough	h2	e2	
# ::edge	giraffe	part	head	g	h3	
# ::edge	peer-01	ARG0	head	p	h3	
# ::edge	have-degree-91	ARG6	peer-01	h2	p	
# ::edge	peer-01	ARG1	over	p	o2	
# ::edge	over	op1	top	o2	t3	
# ::edge	bridge	part	top	b	t3	
(l / look-01
    :ARG0 (t2 / throng
        :consist-of (p2 / person)
        :location (b / bridge
            :part (t3 / top)
            :prep-by (a / and
                :op1 (w / wall
                    :consist-of (r / rock))
                :op2 (t4 / tree))))
    :ARG1 (a2 / and
        :op1 (o / over
            :op1 b)
        :op2 (e / enclosure
            :ARG0-of (h / have-03
                :ARG1 (g / giraffe
                    :quant 2
                    :ARG1-of (h2 / have-degree-91
                        :ARG2 (t / tall)
                        :ARG3 (e2 / enough)
                        :ARG6 (p / peer-01
                            :ARG0 (h3 / head)
                            :ARG1 (o2 / over
                                :op1 t3)))
                    :part h3)))))
