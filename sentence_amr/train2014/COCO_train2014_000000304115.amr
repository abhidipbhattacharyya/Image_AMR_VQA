# ::tok Catchers have to have strong legs to stay in this position for long .
# ::node	p	person	0-1
# ::node	c	catch-01	0-1
# ::node	o	obligate-01	1-2
# ::node	h	have-03	3-4
# ::node	s2	strong-02	4-5
# ::node	l	leg	5-6
# ::node	s	stay-01	7-8
# ::node	t	this	9-10
# ::node	p2	position	10-11
# ::node	l2	long-03	12-13
# ::root	o	obligate-01
# ::edge	person	ARG0-of	catch-01	p	c	
# ::edge	obligate-01	ARG1	have-03	o	h	
# ::edge	have-03	ARG0	person	h	p	
# ::edge	leg	ARG1-of	strong-02	l	s2	
# ::edge	have-03	ARG1	leg	h	l	
# ::edge	have-03	purpose	stay-01	h	s	
# ::edge	stay-01	ARG1	person	s	p	
# ::edge	position	mod	this	p2	t	
# ::edge	stay-01	ARG3	position	s	p2	
# ::edge	stay-01	ARG1-of	long-03	s	l2	
(o / obligate-01
    :ARG1 (h / have-03
        :purpose (s / stay-01
            :ARG1 (p / person
                :ARG0-of (c / catch-01))
            :ARG1-of (l2 / long-03)
            :ARG3 (p2 / position
                :mod (t / this)))
        :ARG0 p
        :ARG1 (l / leg
            :ARG1-of (s2 / strong-02))))
