# ::tok Three trains on a train track : a green one , a blue one and a silver one .
# ::node	0	3	0-1
# ::node	t2	train	1-2
# ::node	b	be-located-at-91	2-3
# ::node	t3	train	4-5
# ::node	t	track	5-6
# ::node	g	green-02	8-9
# ::node	b2	blue	12-13
# ::node	a	and	14-15
# ::node	s	silver	16-17
# ::node	o	one	17-18
# ::node	o2	one	17-18
# ::node	o3	one	17-18
# ::root	b	be-located-at-91
# ::edge	train	quant	3	t2	0	
# ::edge	be-located-at-91	ARG1	train	b	t2	
# ::edge	track	mod	train	t	t3	
# ::edge	be-located-at-91	ARG2	track	b	t	
# ::edge	train	consist-of	and	t2	a	
# ::edge	and	op1	one	a	o	
# ::edge	one	ARG1-of	green-02	o	g	
# ::edge	and	op2	one	a	o2	
# ::edge	one	mod	blue	o2	b2	
# ::edge	one	mod	silver	o3	s	
# ::edge	and	op3	one	a	o3	
(b / be-located-at-91
    :ARG1 (t2 / train
        :quant 3
        :consist-of (a / and
            :op1 (o / one
                :ARG1-of (g / green-02))
            :op2 (o2 / one
                :mod (b2 / blue))
            :op3 (o3 / one
                :mod (s / silver))))
    :ARG2 (t / track
        :mod (t3 / train)))
