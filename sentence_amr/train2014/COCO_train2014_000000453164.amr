# ::tok A large and a small stuffed animal teddy bear , and the smaller one is resting against the larger bear .
# ::node	l	large	1-2
# ::node	a2	and	2-3
# ::node	s	small	4-5
# ::node	s3	stuff-01	5-6
# ::node	s4	stuff-01	5-6
# ::node	a4	animal	6-7
# ::node	t	teddy	7-8
# ::node	b	bear	8-9
# ::node	b2	bear	8-9
# ::node	a3	and	10-11
# ::node	h	have-degree-91	12-13
# ::node	s2	small	12-13
# ::node	m	more	12-13
# ::node	r	rest-01	15-16
# ::node	a	against	16-17
# ::root	a3	and
# ::edge	bear	mod	teddy	b	t	
# ::edge	bear	mod	animal	b	a4	
# ::edge	and	op1	bear	a2	b	
# ::edge	bear	mod	large	b	l	
# ::edge	bear	mod	teddy	b2	t	
# ::edge	bear	mod	animal	b2	a4	
# ::edge	and	op2	bear	a2	b2	
# ::edge	and	op1	and	a3	a2	
# ::edge	bear	ARG1-of	have-degree-91	b2	h	
# ::edge	have-degree-91	ARG4	bear	h	b	
# ::edge	have-degree-91	ARG2	small	h	s2	
# ::edge	have-degree-91	ARG3	more	h	m	
# ::edge	and	op2	rest-01	a3	r	
# ::edge	rest-01	ARG1	bear	r	b2	
# ::edge	rest-01	ARG2	against	r	a	
# ::edge	against	op1	large	a	l	
# ::edge	and	rel	stuff-01	a3	s3	
# ::edge	and	rel	stuff-01	a3	s4	
# ::edge	and	rel	small	a3	s	
(a3 / and
    :op1 (a2 / and
        :op1 (b / bear
            :mod (t / teddy)
            :mod (a4 / animal)
            :mod (l / large))
        :op2 (b2 / bear
            :ARG1-of (h / have-degree-91
                :ARG2 (s2 / small)
                :ARG3 (m / more)
                :ARG4 b)
            :mod t
            :mod a4))
    :op2 (r / rest-01
        :ARG1 b2
        :ARG2 (a / against
            :op1 l))
    :rel (s3 / stuff-01)
    :rel (s4 / stuff-01)
    :rel (s / small))
