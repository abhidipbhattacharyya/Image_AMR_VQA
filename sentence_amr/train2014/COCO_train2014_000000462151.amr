# ::tok A large man with an apron and hat is handling a tray of baked items that rests inside a large open metal locker with many identical trays .
# ::node	l	large	1-2
# ::node	m	man	2-3
# ::node	a2	apron	5-6
# ::node	a	and	6-7
# ::node	h2	hat	7-8
# ::node	h	handle-01	9-10
# ::node	t	tray	11-12
# ::node	b2	bake-01	13-14
# ::node	i3	item	14-15
# ::node	r	rest-01	16-17
# ::node	i2	inside	17-18
# ::node	l2	large	19-20
# ::node	o	open-01	20-21
# ::node	m3	metal	21-22
# ::node	l3	locker	22-23
# ::node	m2	many	24-25
# ::node	i	identical-01	25-26
# ::node	b	bag	26-27
# ::root	h	handle-01
# ::edge	man	mod	large	m	l	
# ::edge	and	op1	apron	a	a2	
# ::edge	man	poss-of	and	m	a	
# ::edge	and	op2	hat	a	h2	
# ::edge	handle-01	ARG0	man	h	m	
# ::edge	handle-01	ARG1	tray	h	t	
# ::edge	item	ARG1-of	bake-01	i3	b2	
# ::edge	tray	consist-of	item	t	i3	
# ::edge	tray	ARG1-of	rest-01	t	r	
# ::edge	rest-01	ARG2	inside	r	i2	
# ::edge	locker	consist-of	metal	l3	m3	
# ::edge	locker	ARG1-of	open-01	l3	o	
# ::edge	locker	mod	large	l3	l2	
# ::edge	inside	op1	locker	i2	l3	
# ::edge	bag	ARG1-of	identical-01	b	i	
# ::edge	bag	quant	many	b	m2	
# ::edge	locker	part	bag	l3	b	
(h / handle-01
    :ARG0 (m / man
        :mod (l / large)
        :poss-of (a / and
            :op1 (a2 / apron)
            :op2 (h2 / hat)))
    :ARG1 (t / tray
        :ARG1-of (r / rest-01
            :ARG2 (i2 / inside
                :op1 (l3 / locker
                    :ARG1-of (o / open-01)
                    :consist-of (m3 / metal)
                    :mod (l2 / large)
                    :part (b / bag
                        :quant (m2 / many)
                        :ARG1-of (i / identical-01)))))
        :consist-of (i3 / item
            :ARG1-of (b2 / bake-01))))
