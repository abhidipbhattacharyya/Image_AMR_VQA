# ::tok Two suitcases , one with a bird design and one with a fish design .
# ::node	2	2	0-1
# ::node	s	suitcase	1-2
# ::node	c	case	1-2
# ::node	c2	case	1-2
# ::node	i	include-91	3-4
# ::node	i2	include-91	3-4
# ::node	0	1	3-4
# ::node	1	1	3-4
# ::node	b	bird	6-7
# ::node	d	design-01	7-8
# ::node	d2	design-01	7-8
# ::node	a	and	8-9
# ::node	f	fish	12-13
# ::root	a	and
# ::edge	suitcase	quant	2	s	2	
# ::edge	suitcase	ARG2-of	include-91	s	i	
# ::edge	include-91	ARG1	case	i2	c2	
# ::edge	suitcase	ARG2-of	include-91	s	i2	
# ::edge	case	quant	1	c	0	
# ::edge	case	quant	1	c2	1	
# ::edge	design-01	ARG2	bird	d	b	
# ::edge	case	ARG1-of	design-01	c	d	
# ::edge	case	ARG1-of	design-01	c2	d2	
# ::edge	and	op2	case	a	c2	
# ::edge	and	op1	suitcase	a	s	
# ::edge	design-01	ARG2	fish	d2	f	
# ::edge	and	rel	case	a	c	
(a / and
    :op1 (s / suitcase
        :quant 2
        :ARG2-of (i / include-91)
        :ARG2-of (i2 / include-91
            :ARG1 (c2 / case
                :quant 1
                :ARG1-of (d2 / design-01
                    :ARG2 (f / fish)))))
    :op2 c2
    :rel (c / case
        :quant 1
        :ARG1-of (d / design-01
            :ARG2 (b / bird))))
