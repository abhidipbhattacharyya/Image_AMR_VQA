# ::tok Two carrots on a green mat with yellow squares on it in front of a compact disc cover with a skull .
# ::node	0	2	0-1
# ::node	c	carrot	1-2
# ::node	b	be-located-at-91	2-3
# ::node	g	green-02	4-5
# ::node	m	mat	5-6
# ::node	h	have-03	6-7
# ::node	y	yellow-02	7-8
# ::node	s2	square	8-9
# ::node	i	in-front-of	12-13
# ::node	c2	compact-01	15-16
# ::node	d	disc	16-17
# ::node	c3	cover	17-18
# ::node	h2	have-03	18-19
# ::node	s	skull	20-21
# ::root	b	be-located-at-91
# ::edge	carrot	quant	2	c	0	
# ::edge	be-located-at-91	ARG1	carrot	b	c	
# ::edge	mat	ARG1-of	green-02	m	g	
# ::edge	be-located-at-91	ARG2	mat	b	m	
# ::edge	mat	location-of	have-03	m	h	
# ::edge	square	ARG1-of	yellow-02	s2	y	
# ::edge	have-03	ARG1	square	h	s2	
# ::edge	be-located-at-91	location	in-front-of	b	i	
# ::edge	cover	consist-of	disc	c3	d	
# ::edge	cover	ARG1-of	compact-01	c3	c2	
# ::edge	in-front-of	op1	cover	i	c3	
# ::edge	cover	ARG0-of	have-03	c3	h2	
# ::edge	have-03	ARG1	skull	h2	s	
(b / be-located-at-91
    :ARG1 (c / carrot
        :quant 2)
    :ARG2 (m / mat
        :ARG1-of (g / green-02)
        :location-of (h / have-03
            :ARG1 (s2 / square
                :ARG1-of (y / yellow-02))))
    :location (i / in-front-of
        :op1 (c3 / cover
            :ARG0-of (h2 / have-03
                :ARG1 (s / skull))
            :ARG1-of (c2 / compact-01)
            :consist-of (d / disc))))
