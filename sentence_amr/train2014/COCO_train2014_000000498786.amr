# ::tok Part of one of the pizzas has been eaten and the other pizza has not been touched .
# ::node	t	thing	0-1
# ::node	1	1	2-3
# ::node	i	include-91	3-4
# ::node	p2	pizzeria	5-6
# ::node	p3	pizzeria	5-6
# ::node	e	eat-01	8-9
# ::node	a	and	9-10
# ::node	o	other	11-12
# ::node	p	pizza	12-13
# ::node	0	-	14-15
# ::node	t2	touch-01	16-17
# ::root	a	and
# ::edge	pizzeria	ARG1-of	include-91	p2	i	
# ::edge	pizzeria	quant	1	p2	1	
# ::edge	thing	part-of	pizzeria	t	p2	
# ::edge	include-91	ARG2	pizzeria	i	p3	
# ::edge	eat-01	ARG1	thing	e	t	
# ::edge	and	op1	eat-01	a	e	
# ::edge	pizza	mod	other	p	o	
# ::edge	touch-01	polarity	-	t2	0	
# ::edge	touch-01	ARG1	pizza	t2	p	
# ::edge	and	op2	touch-01	a	t2	
(a / and
    :op1 (e / eat-01
        :ARG1 (t / thing
            :part-of (p2 / pizzeria
                :quant 1
                :ARG1-of (i / include-91
                    :ARG2 (p3 / pizzeria)))))
    :op2 (t2 / touch-01
        :ARG1 (p / pizza
            :mod (o / other))
        :polarity -))
