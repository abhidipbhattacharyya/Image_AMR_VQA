# ::tok a plate with an egg lunch meat a croissant on it and eating utinsils
# ::node	p	plate	1-2
# ::node	h	have-03	2-3
# ::node	e2	egg	4-5
# ::node	l	lunch-01	5-6
# ::node	m	meat	6-7
# ::node	c	croissant	8-9
# ::node	a	and	11-12
# ::node	a2	and	11-12
# ::node	e	eat-01	12-13
# ::node	h2	healthcare	13-14
# ::root	a	and
# ::edge	plate	ARG0-of	have-03	p	h	
# ::edge	meat	mod	lunch-01	m	l	
# ::edge	meat	consist-of	egg	m	e2	
# ::edge	and	op2	croissant	a	c	
# ::edge	and	op1	meat	a	m	
# ::edge	and	op2	croissant	a2	c	
# ::edge	and	op1	meat	a2	m	
# ::edge	have-03	ARG1	and	h	a2	
# ::edge	and	op3	eat-01	a	e	
# ::edge	eat-01	ARG1	healthcare	e	h2	
# ::edge	and	rel	plate	a	p	
(a / and
    :op1 (m / meat
        :consist-of (e2 / egg)
        :mod (l / lunch-01))
    :op2 (c / croissant)
    :op3 (e / eat-01
        :ARG1 (h2 / healthcare))
    :rel (p / plate
        :ARG0-of (h / have-03
            :ARG1 (a2 / and
                :op1 m
                :op2 c))))
