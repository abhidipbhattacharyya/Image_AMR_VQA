# ::tok A tall stack of suitcases arranged largest on bottom to smallest on top .
# ::node	t	tall	1-2
# ::node	s2	stack-01	2-3
# ::node	s3	suitcase	4-5
# ::node	a	arrange-01	5-6
# ::node	a2	arrange-01	5-6
# ::node	h	have-degree-91	6-7
# ::node	l	large	6-7
# ::node	m	most	6-7
# ::node	h2	have-degree-91	6-7
# ::node	m2	most	6-7
# ::node	b	bottom	8-9
# ::node	s	small	10-11
# ::node	m3	most	10-11
# ::node	t2	top	12-13
# ::root	a	arrange-01
# ::edge	stack-01	mod	tall	s2	t	
# ::edge	stack-01	ARG1	suitcase	s2	s3	
# ::edge	arrange-01	ARG1	stack-01	a	s2	
# ::edge	arrange-01	ARG1	stack-01	a2	s2	
# ::edge	arrange-01	ARG1-of	have-degree-91	a	h	
# ::edge	have-degree-91	ARG2	large	h	l	
# ::edge	have-degree-91	ARG3	most	h	m	
# ::edge	arrange-01	ARG1-of	have-degree-91	a2	h2	
# ::edge	have-degree-91	ARG3	most	h2	m2	
# ::edge	arrange-01	location	bottom	a	b	
# ::edge	have-degree-91	ARG2	small	h2	s	
# ::edge	have-degree-91	ARG3	most	h2	m3	
# ::edge	arrange-01	location	top	a2	t2	
# ::edge	arrange-01	rel	arrange-01	a	a2	
(a / arrange-01
    :ARG1 (s2 / stack-01
        :ARG1 (s3 / suitcase)
        :mod (t / tall))
    :ARG1-of (h / have-degree-91
        :ARG2 (l / large)
        :ARG3 (m / most))
    :location (b / bottom)
    :rel (a2 / arrange-01
        :ARG1 s2
        :ARG1-of (h2 / have-degree-91
            :ARG2 (s / small)
            :ARG3 (m2 / most)
            :ARG3 (m3 / most))
        :location (t2 / top)))
