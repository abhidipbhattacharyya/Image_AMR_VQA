# ::tok A pizza with salad and other toppings on it , set on a table next to a wine and water glass , and basket of bread .
# ::node	p	pizza	1-2
# ::node	h	have-03	2-3
# ::node	s	salad	3-4
# ::node	a	and	4-5
# ::node	o	other	5-6
# ::node	f	food-dish	6-7
# ::node	e	eat-01	6-7
# ::node	a2	and	9-10
# ::node	s2	set-01	10-11
# ::node	t	table	13-14
# ::node	n	next-to	14-15
# ::node	w2	wine	17-18
# ::node	a3	and	18-19
# ::node	w	water	19-20
# ::node	g	glass	20-21
# ::node	g2	glass	20-21
# ::node	b	basket	23-24
# ::node	b2	bread	25-26
# ::root	a2	and
# ::edge	have-03	location	pizza	h	p	
# ::edge	pizza	ARG0-of	have-03	p	h	
# ::edge	and	op1	salad	a	s	
# ::edge	have-03	ARG1	and	h	a	
# ::edge	food-dish	mod	other	f	o	
# ::edge	and	op2	food-dish	a	f	
# ::edge	food-dish	ARG1-of	eat-01	f	e	
# ::edge	and	op1	pizza	a2	p	
# ::edge	and	ARG1-of	set-01	a2	s2	
# ::edge	set-01	ARG2	table	s2	t	
# ::edge	table	location	next-to	t	n	
# ::edge	next-to	op1	and	n	a3	
# ::edge	and	op1	glass	a3	g	
# ::edge	glass	mod	wine	g	w2	
# ::edge	glass	mod	water	g2	w	
# ::edge	and	op2	glass	a3	g2	
# ::edge	and	op2	basket	a2	b	
# ::edge	basket	consist-of	bread	b	b2	
(a2 / and
    :ARG1-of (s2 / set-01
        :ARG2 (t / table
            :location (n / next-to
                :op1 (a3 / and
                    :op1 (g / glass
                        :mod (w2 / wine))
                    :op2 (g2 / glass
                        :mod (w / water))))))
    :op1 (p / pizza
        :ARG0-of (h / have-03
            :ARG1 (a / and
                :op1 (s / salad)
                :op2 (f / food-dish
                    :ARG1-of (e / eat-01)
                    :mod (o / other)))
            :location p))
    :op2 (b / basket
        :consist-of (b2 / bread)))
