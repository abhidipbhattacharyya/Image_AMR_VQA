# ::tok A person standing next to a car that has the passenger door open and the hatch open , and three sets of snow skis laying on the ground .
# ::node	p2	person	1-2
# ::node	s4	stand-01	2-3
# ::node	n	next-to	3-4
# ::node	c	car	6-7
# ::node	h2	have-03	8-9
# ::node	p	passenger	10-11
# ::node	d	door	11-12
# ::node	o	open-01	12-13
# ::node	o2	open-01	12-13
# ::node	a	and	13-14
# ::node	h	hatch	15-16
# ::node	0	3	19-20
# ::node	s	set	20-21
# ::node	s3	snow	22-23
# ::node	s2	ski-01	23-24
# ::node	l	lay-01	24-25
# ::node	g	ground	27-28
# ::root	s4	stand-01
# ::edge	stand-01	ARG1	person	s4	p2	
# ::edge	stand-01	ARG2	next-to	s4	n	
# ::edge	next-to	op1	car	n	c	
# ::edge	car	ARG0-of	have-03	c	h2	
# ::edge	door	mod	passenger	d	p	
# ::edge	car	part	door	c	d	
# ::edge	open-01	ARG1	door	o	d	
# ::edge	open-01	ARG0	car	o	c	
# ::edge	open-01	ARG1	car	o2	c	
# ::edge	open-01	ARG0	car	o2	c	
# ::edge	and	op2	open-01	a	o2	
# ::edge	and	op1	open-01	a	o	
# ::edge	have-03	ARG1	and	h2	a	
# ::edge	open-01	ARG1	hatch	o2	h	
# ::edge	set	quant	3	s	0	
# ::edge	ski-01	ARG1	snow	s2	s3	
# ::edge	set	consist-of	ski-01	s	s2	
# ::edge	set	ARG1-of	lay-01	s	l	
# ::edge	lay-01	ARG2	ground	l	g	
# ::edge	stand-01	rel	set	s4	s	
(s4 / stand-01
    :ARG1 (p2 / person)
    :ARG2 (n / next-to
        :op1 (c / car
            :ARG0-of (h2 / have-03
                :ARG1 (a / and
                    :op1 (o / open-01
                        :ARG0 c
                        :ARG1 (d / door
                            :mod (p / passenger)))
                    :op2 (o2 / open-01
                        :ARG0 c
                        :ARG1 c
                        :ARG1 (h / hatch))))
            :part d))
    :rel (s / set
        :quant 3
        :ARG1-of (l / lay-01
            :ARG2 (g / ground))
        :consist-of (s2 / ski-01
            :ARG1 (s3 / snow))))
