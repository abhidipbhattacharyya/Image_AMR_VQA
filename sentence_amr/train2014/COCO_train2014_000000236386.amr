# ::tok There are many objects , cases , and other odd things in this picture .
# ::node	m	many	2-3
# ::node	o	object	3-4
# ::node	a	and	4-5
# ::node	c	case-03	5-6
# ::node	o3	other	8-9
# ::node	o2	odd	9-10
# ::node	t	thing	10-11
# ::node	b	be-located-at-91	11-12
# ::node	t2	this	12-13
# ::node	p	picture	13-14
# ::root	b	be-located-at-91
# ::edge	object	quant	many	o	m	
# ::edge	and	op1	object	a	o	
# ::edge	and	op2	case-03	a	c	
# ::edge	thing	mod	odd	t	o2	
# ::edge	thing	mod	other	t	o3	
# ::edge	and	op3	thing	a	t	
# ::edge	be-located-at-91	ARG1	and	b	a	
# ::edge	picture	mod	this	p	t2	
# ::edge	be-located-at-91	ARG2	picture	b	p	
(b / be-located-at-91
    :ARG1 (a / and
        :op1 (o / object
            :quant (m / many))
        :op2 (c / case-03)
        :op3 (t / thing
            :mod (o2 / odd)
            :mod (o3 / other)))
    :ARG2 (p / picture
        :mod (t2 / this)))
