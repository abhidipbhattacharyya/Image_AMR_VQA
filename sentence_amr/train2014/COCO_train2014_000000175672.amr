# ::tok A stop sign that has another sign saying all way under it .
# ::node	s4	stop-01	1-2
# ::node	s3	signal-07	2-3
# ::node	h	have-03	4-5
# ::node	a2	another	5-6
# ::node	s2	sign	6-7
# ::node	s	say-01	7-8
# ::node	0	expressive	8-9
# ::node	a	all-the-way	9-10
# ::node	u	under	10-11
# ::root	s3	signal-07
# ::edge	signal-07	ARG1	stop-01	s3	s4	
# ::edge	signal-07	ARG0-of	have-03	s3	h	
# ::edge	sign	mod	another	s2	a2	
# ::edge	have-03	ARG1	sign	h	s2	
# ::edge	sign	ARG0-of	say-01	s2	s	
# ::edge	all-the-way	mode	expressive	a	0	
# ::edge	say-01	degree	all-the-way	s	a	
# ::edge	say-01	location	under	s	u	
# ::edge	under	op1	signal-07	u	s3	
(s3 / signal-07
    :ARG0-of (h / have-03
        :ARG1 (s2 / sign
            :ARG0-of (s / say-01
                :degree (a / all-the-way
                    :mode expressive)
                :location (u / under
                    :op1 s3))
            :mod (a2 / another)))
    :ARG1 (s4 / stop-01))
