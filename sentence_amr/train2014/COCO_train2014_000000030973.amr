# ::tok One person sits on a top bunk and another sits on the bottom .
# ::node	0	1	0-1
# ::node	p	person	1-2
# ::node	p2	person	1-2
# ::node	s	sit-01	2-3
# ::node	t	top	5-6
# ::node	b2	bunk	6-7
# ::node	b3	bunk	6-7
# ::node	a	and	7-8
# ::node	a2	another	8-9
# ::node	s2	sit-01	9-10
# ::node	b	bottom	12-13
# ::root	a	and
# ::edge	person	quant	1	p	0	
# ::edge	sit-01	ARG1	person	s	p	
# ::edge	bunk	location	top	b2	t	
# ::edge	sit-01	ARG2	bunk	s	b2	
# ::edge	and	op1	sit-01	a	s	
# ::edge	person	mod	another	p2	a2	
# ::edge	and	op2	sit-01	a	s2	
# ::edge	sit-01	ARG2	bunk	s2	b3	
# ::edge	sit-01	ARG1	person	s2	p2	
# ::edge	bunk	location	bottom	b3	b	
(a / and
    :op1 (s / sit-01
        :ARG1 (p / person
            :quant 1)
        :ARG2 (b2 / bunk
            :location (t / top)))
    :op2 (s2 / sit-01
        :ARG1 (p2 / person
            :mod (a2 / another))
        :ARG2 (b3 / bunk
            :location (b / bottom))))
