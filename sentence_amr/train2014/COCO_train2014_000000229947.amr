# ::tok A glass display case full of doughnuts with two workers behind it .
# ::node	g	glass	1-2
# ::node	d	display-01	2-3
# ::node	c	case	3-4
# ::node	f	full-09	4-5
# ::node	d2	donut	6-7
# ::node	0	2	8-9
# ::node	p	person	9-10
# ::node	w	work-01	9-10
# ::node	b	be-located-at-91	10-11
# ::node	b2	behind	10-11
# ::root	c	case
# ::edge	display-01	ARG2	glass	d	g	
# ::edge	case	ARG1-of	display-01	c	d	
# ::edge	case	ARG1-of	full-09	c	f	
# ::edge	full-09	ARG2	donut	f	d2	
# ::edge	person	quant	2	p	0	
# ::edge	person	ARG0-of	work-01	p	w	
# ::edge	be-located-at-91	ARG1	person	b	p	
# ::edge	case	ARG2-of	be-located-at-91	c	b	
# ::edge	be-located-at-91	location	behind	b	b2	
# ::edge	behind	op1	case	b2	c	
(c / case
    :ARG1-of (d / display-01
        :ARG2 (g / glass))
    :ARG1-of (f / full-09
        :ARG2 (d2 / donut))
    :ARG2-of (b / be-located-at-91
        :ARG1 (p / person
            :quant 2
            :ARG0-of (w / work-01))
        :location (b2 / behind
            :op1 c)))
