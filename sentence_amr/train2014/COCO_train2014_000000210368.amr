# ::tok A light blue tiled surface with a Happy 1st Birthday teddy bear cake and another cake with a 1 on top , and a plate with cake on it , and the tops of a group of forks .
# ::node	l	light-07	1-2
# ::node	b3	blue	2-3
# ::node	t2	tile-01	3-4
# ::node	s2	surface	4-5
# ::node	h	happy-01	7-8
# ::node	o	ordinal-entity	8-9
# ::node	0	1	8-9
# ::node	b2	birthday	9-10
# ::node	t	teddy	10-11
# ::node	b	bear	11-12
# ::node	c	cake	12-13
# ::node	a	and	13-14
# ::node	a2	another	14-15
# ::node	c2	cake	15-16
# ::node	h2	have-03	16-17
# ::node	s	seismic-quantity	18-19
# ::node	1	1	18-19
# ::node	t3	top	20-21
# ::node	p	plate	24-25
# ::node	h3	have-03	25-26
# ::node	c3	cake	26-27
# ::node	t4	top	32-33
# ::node	g	group	35-36
# ::node	f	fork-out-02	37-38
# ::root	s2	surface
# ::edge	blue	ARG1-of	light-07	b3	l	
# ::edge	surface	ARG1-of	tile-01	s2	t2	
# ::edge	surface	mod	blue	s2	b3	
# ::edge	ordinal-entity	value	1	o	0	
# ::edge	birthday	ord	ordinal-entity	b2	o	
# ::edge	birthday	ARG1-of	happy-01	b2	h	
# ::edge	bear	mod	teddy	b	t	
# ::edge	cake	mod	bear	c	b	
# ::edge	cake	mod	birthday	c	b2	
# ::edge	and	op1	cake	a	c	
# ::edge	surface	location-of	and	s2	a	
# ::edge	cake	mod	another	c2	a2	
# ::edge	and	op2	cake	a	c2	
# ::edge	cake	ARG0-of	have-03	c2	h2	
# ::edge	seismic-quantity	quant	1	s	1	
# ::edge	top	location-of	seismic-quantity	t3	s	
# ::edge	have-03	location	top	h2	t3	
# ::edge	and	op3	plate	a	p	
# ::edge	plate	ARG0-of	have-03	p	h3	
# ::edge	have-03	ARG1	cake	h3	c3	
# ::edge	and	op4	top	a	t4	
# ::edge	top	part-of	group	t4	g	
# ::edge	group	ARG1-of	fork-out-02	g	f	
(s2 / surface
    :ARG1-of (t2 / tile-01)
    :location-of (a / and
        :op1 (c / cake
            :mod (b / bear
                :mod (t / teddy))
            :mod (b2 / birthday
                :ARG1-of (h / happy-01)
                :ord (o / ordinal-entity
                    :value 1)))
        :op2 (c2 / cake
            :ARG0-of (h2 / have-03
                :location (t3 / top
                    :location-of (s / seismic-quantity
                        :quant 1)))
            :mod (a2 / another))
        :op3 (p / plate
            :ARG0-of (h3 / have-03
                :ARG1 (c3 / cake)))
        :op4 (t4 / top
            :part-of (g / group
                :ARG1-of (f / fork-out-02))))
    :mod (b3 / blue
        :ARG1-of (l / light-07)))
