# ::id val2014~COCO_val2014_000000282741
# ::doc_file val2014~COCO_val2014_000000282741
# ::tok A cart is filled with various suitcases and trunks , including a large black suitcase and a smaller one . <next_sent> The cart is red and has a green wheel . <next_sent> The suitcases are stacked on top of each other , and some are placed next to each other .
(d / document
   :snt1 (s1.f / fill-01
               :ARG1 (s1.c / cart)
               :ARG2 (s1.a / and
                           :ARG2-of (s1.i / include-91
                                          :ARG1 (s1.a2 / and
                                                       :op1 (s1.s3 / suitcase
                                                                   :ARG1-of (s1.b / black-04)
                                                                   :mod (s1.l / large))
                                                       :op2 (s1.s4 / suitcase
                                                                   :ARG1-of (s1.h / have-degree-91
                                                                                  :ARG2 (s1.s / small)
                                                                                  :ARG3 (s1.m / more)
                                                                                  :ARG4 s1.s3))))
                           :mod (s1.v / various)
                           :op1 (s1.s2 / suitcase)
                           :op2 (s1.t / truffle)))
   :snt2 (s2.a / and
               :op1 (s2.c / cart
                          :ARG1-of (s2.r / red-02)
                          :same-as s1.c)
               :op2 (s2.h / have-03
                          :ARG0 s2.c
                          :ARG1 (s2.w / wheel
                                      :ARG1-of (s2.g / green-02))))
   :snt3 (s3.a / and
               :op1 (s3.s2 / stack-01
                           :ARG1 (s3.s3 / suitcase
                                        :same-as s1.a)
                           :ARG2 (s3.t / top
                                       :op1 (s3.e / each)
                                       :op1 (s3.o / other
                                                  :mod s3.e)))
               :op2 (s3.p / place-01
                          :ARG1 (s3.c / case
                                      :quant (s3.s / some))
                          :ARG2 (s3.n / next-to
                                      :op1 s3.c))))