# ::id val2014~COCO_val2014_000000156740
# ::doc_file val2014~COCO_val2014_000000156740
# ::tok A bakery display case filled with various types of bread . <next_sent> There are at least 13 different types of bread , including a loaf of bread with a bear on it . <next_sent> The bread is arranged on shelves and some are stacked on top of each other . <next_sent> The display case is filled with a variety of breads , making it an enticing sight for customers .
(d / document
   :snt1 (s1.c / case
               :ARG1-of (s1.f / fill-01
                              :ARG2 (s1.b2 / bread
                                           :mod (s1.t / type
                                                      :mod (s1.v / various))))
               :ARG2-of (s1.d / display-01)
               :mod (s1.b / bakery))
   :snt2 (s2.b2 / bread
                :ARG2-of (s2.i / include-01
                               :ARG1 (s2.l / loaf
                                           :ARG0-of (s2.h / have-03
                                                          :ARG1 (s2.b / bear))))
                :mod (s2.t / type
                           :quant (s2.a / at-least
                                        :op1 "13")
                           :ARG1-of (s2.d / differ-02)))
   :snt3 (s3.a / and
               :op1 (s3.a2 / arrange-01
                           :ARG1 (s3.b / bread
                                       :same-as s1.b2)
                           :ARG2 (s3.s / shelf))
               :op2 (s3.s3 / stack-01
                           :ARG1 (s3.b2 / bread
                                        :quant (s3.s2 / some))
                           :ARG2 (s3.t / top
                                       :mod (s3.o / other
                                                  :mod (s3.e / each)))))
   :snt4 (s4.f / fill-01
               :ARG0-of (s4.m / make-02
                              :ARG1 (s4.s2 / sight-01
                                           :ARG0 (s4.c2 / customer)
                                           :ARG0-of (s4.a / attract-01)
                                           :ARG1 (s4.c / case
                                                       :ARG2-of (s4.d / display-01)
                                                       :ARG1-of s4.f
                                                       :same-as s1.c)))
               :ARG2 (s4.s / sandwich
                           :mod (s4.v / variety))))