# ::id val2014~COCO_val2014_000000358410
# ::doc_file val2014~COCO_val2014_000000358410
# ::tok A bird is perched on a wooden ledge outside a building . <next_sent> The bird is looking out of a window , possibly observing its surroundings . <next_sent> The window is located above the bird , and the ledge is below the window . <next_sent> The bird is standing on one leg , possibly to maintain balance .
(d / document
   :snt1 (s1.p / perch-01
               :ARG1 (s1.b / bird)
               :ARG2 (s1.l / ledge
                           :consist-of (s1.w / wood)
                           :location (s1.o / outside
                                           :op1 (s1.b2 / building))))
   :snt2 (s2.a / and
               :op1 (s2.l / look-01
                          :ARG0 (s2.b / bird
                                      :same-as s1.b)
                          :direction (s2.o2 / out
                                            :op1 (s2.w / window)))
               :op2 (s2.p / possible-01
                          :ARG1 (s2.o / observe-01
                                      :ARG0 s2.b
                                      :ARG1 (s2.t / thing
                                                  :ARG1-of (s2.s / surround-01
                                                                 :ARG2 s2.b)))))
   :snt3 (s3.a2 / and
                :op1 (s3.l2 / locate-01
                            :ARG1 (s3.w / window
                                        :same-as s2.w)
                            :location (s3.a / above
                                            :op1 (s3.b3 / bird
                                                        :same-as s1.b)))
                :op2 (s3.b / be-located-at-91
                           :ARG1 (s3.l / ledge
                                       :same-as s1.l)
                           :ARG2 (s3.b2 / below
                                        :op1 s3.w)))
   :snt4 (s4.s / stand-01
               :purpose (s4.m / maintain-01
                              :ARG0 (s4.b2 / bird
                                           :same-as s1.b)
                              :ARG1 (s4.b / balance)
                              :ARG1-of (s4.p / possible-01))
               :ARG1 s4.b2
               :ARG2 (s4.l / leg
                           :quant "1")))