# ::id val2014~COCO_val2014_000000475667
# ::doc_file val2014~COCO_val2014_000000475667
# ::tok A giraffe is standing in a zoo enclosure with a baby giraffe in its arms . <next_sent> The giraffe is facing the camera and appears to be looking at the photographer . <next_sent> The enclosure is surrounded by a stone wall and has a fence in the background . <next_sent> There are also a few trees in the enclosure , one near the left side and another near the right side .
(d / document
   :snt1 (s1.s / stand-01
               :ARG1 (s1.g / giraffe
                           :part (s1.a / arm))
               :ARG2 (s1.e / enclosure
                           :mod (s1.z / zoo))
               :accompanier (s1.g2 / giraffe
                                   :location s1.a
                                   :mod (s1.b / baby)))
   :snt2 (s2.a / and
               :op1 (s2.f / face-01
                          :ARG0 (s2.g / giraffe
                                      :same-as s1.g)
                          :ARG1 (s2.c / camera))
               :op2 (s2.a2 / appear-02
                           :ARG1 (s2.l / look-01
                                       :ARG0 s2.g
                                       :ARG1 (s2.p / person
                                                   :ARG0-of (s2.p2 / photograph-01)))))
   :snt3 (s3.a / and
               :op1 (s3.s2 / surround-01
                           :ARG1 (s3.w / wall
                                       :consist-of (s3.s / stone))
                           :ARG2 (s3.e / enclosure
                                       :same-as s1.e))
               :op2 (s3.h / have-03
                          :ARG0 s3.e
                          :ARG1 (s3.f / fence
                                      :location (s3.b / background))))
   :snt4 (s4.a2 / and
                :op1 (s4.t / tree
                           :quant (s4.f / few)
                           :location (s4.e / enclosure
                                           :same-as s1.e)
                           :mod (s4.a / also)
                           :quant "1")
                :op2 (s4.t2 / tree
                            :ARG1-of (s4.n / near-02
                                           :ARG2 (s4.s / side
                                                       :ARG1-of (s4.l / left-20)))
                            :ARG1-of (s4.n2 / near-02
                                            :ARG2 (s4.s2 / side
                                                         :ARG1-of (s4.r / right-04)))
                            :mod (s4.a3 / another))))