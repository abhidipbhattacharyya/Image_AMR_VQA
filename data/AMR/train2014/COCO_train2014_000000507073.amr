# ::id train2014~COCO_train2014_000000507073
# ::doc_file train2014~COCO_train2014_000000507073
# ::tok A woman sits at a table with two pizzas in front of her . <next_sent> One pizza has a lot of toppings , while the other has less . <next_sent> There are also two cups on the table , one near the woman and the other further away . <next_sent> A cell phone is placed on the table , and a fork is visible on the table as well .
(d / document
   :snt1 (s1.s / sit-01
               :ARG1 (s1.w / woman
                           :ARG0-of (s1.h / have-03
                                          :ARG1 (s1.p / pizzeria
                                                      :quant "2")))
               :ARG2 (s1.t / table)
               :location (s1.i / in-front-of
                               :op1 s1.w))
   :snt2 (s2.c3 / contrast-01
                :ARG1 (s2.h / have-03
                            :ARG0 (s2.p / pizza
                                        :ARG2-of (s2.t / top-01)
                                        :mod (s2.o / one))
                            :ARG1 (s2.c / continent
                                        :quant (s2.l2 / lot)))
                :ARG2 (s2.h2 / have-03
                             :ARG0 (s2.p2 / pizza
                                          :mod (s2.o2 / other))
                             :ARG1 s2.t)
                :rel (s2.c2 / continent
                            :quant (s2.l / less)))
   :snt3 (s3.b / be-located-at-91
               :ARG1 (s3.c / cup
                           :ARG1-of (s3.n / near-02
                                          :ARG2 (s3.w / woman
                                                      :same-as s1.w))
                           :example (s3.a2 / and
                                           :op2 (s3.c2 / cup
                                                       :ARG1-of (s3.n2 / near-02
                                                                       :ARG2 (s3.f / far
                                                                                   :ARG3 (s3.m / more)))))
                           :op1-of s3.a2
                           :mod (s3.a / also)
                           :quant "1"
                           :quant "2")
               :ARG2 (s3.t / table
                           :same-as s1.t))
   :snt4 (s4.a / and
               :op1 (s4.p2 / place-01
                           :ARG1 (s4.p / phone
                                       :mod (s4.c / cell))
                           :ARG2 (s4.t / table
                                       :same-as s1.t))
               :op2 (s4.s / see-01
                          :ARG1 (s4.f / fork)
                          :location s4.t
                          :mod (s4.a2 / as-well))))