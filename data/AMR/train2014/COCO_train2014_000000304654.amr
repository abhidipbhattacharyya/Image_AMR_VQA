# ::id train2014~COCO_train2014_000000304654
# ::doc_file train2014~COCO_train2014_000000304654
# ::tok A giraffe is standing next to a fence and eating leaves from a tree . <next_sent> The giraffe is the main focus of the image , and it is surrounded by a few trees and bushes . <next_sent> The giraffe 's long neck and legs are clearly visible , as it leans over to eat the leaves .
(d / document
   :snt1 (s1.a / and
               :op1 (s1.s / stand-01
                          :ARG0 (s1.g / giraffe)
                          :ARG2 (s1.n / next-to
                                      :op1 (s1.f / fence)))
               :op2 (s1.e / eat-01
                          :ARG0 s1.g
                          :ARG1 (s1.l / leaf
                                      :source (s1.t / tree))))
   :snt2 (s2.a / and
               :op1 (s2.f2 / focus-01
                           :ARG1 (s2.i / image)
                           :ARG2 (s2.g / giraffe
                                       :same-as s1.g)
                           :mod (s2.m / main))
               :op2 (s2.s / surround-01
                          :ARG1 (s2.a2 / and
                                       :quant (s2.f / few)
                                       :op1 (s2.t / tree)
                                       :op2 (s2.b / bush))
                          :ARG2 s2.g))
   :snt3 (s3.p / possible-01
               :ARG1 (s3.s / see-01
                           :ARG1 (s3.a / and
                                       :op1 (s3.n / neck
                                                  :ARG1-of (s3.l4 / long-03
                                                                  :ARG1 (s3.l3 / leg)))
                                       :op2 s3.l3)
                           :ARG1-of (s3.c / clear-06
                                          :time (s3.l2 / lean-01
                                                       :purpose (s3.e / eat-01
                                                                      :ARG0 (s3.g / giraffe
                                                                                  :part s3.n
                                                                                  :part s3.l3
                                                                                  :same-as s1.g)
                                                                      :ARG1 (s3.l / leaf
                                                                                  :same-as s1.l))
                                                       :ARG1 s3.g
                                                       :ARG2 (s3.o / over))))))