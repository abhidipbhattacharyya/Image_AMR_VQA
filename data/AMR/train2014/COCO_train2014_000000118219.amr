# ::id train2014~COCO_train2014_000000118219
# ::doc_file train2014~COCO_train2014_000000118219
# ::tok A slice of pizza is on a white paper plate on a table . <next_sent> The plate is on a table that has a red and yellow checkered tablecloth . <next_sent> The pizza is on a paper plate , and there is a cup of soda next to it . <next_sent> A person is sitting at the table , and there is a handbag on the table as well .
(d / document
   :snt1 (s1.b / be-located-at-91
               :ARG1 (s1.s / slice
                           :part-of (s1.p2 / pizza))
               :ARG2 (s1.p3 / plate
                            :ARG1-of (s1.w / white-03)
                            :consist-of (s1.p / paper)
                            :location (s1.t / table)))
   :snt2 (s2.b / be-located-at-91
               :ARG1 (s2.p2 / plate
                            :same-as s1.p3)
               :ARG2 (s2.t / table
                           :ARG0-of (s2.h / have-03
                                          :ARG1 (s2.a / and
                                                      :op1 (s2.p / pattern
                                                                 :ARG1-of (s2.r / red-02))
                                                      :op1 (s2.t2 / tablecloth
                                                                  :ARG1-of (s2.c / crap-01
                                                                                 :ARG1 s2.t3))
                                                      :op2 (s2.t3 / tablecloth))))
               :rel (s2.y / yellow-02
                          :same-as s1.t))
   :snt3 (s3.a / and
               :op1 (s3.b / be-located-at-91
                          :ARG1 (s3.p2 / pizza
                                       :same-as s1.s)
                          :ARG2 (s3.p3 / plate
                                       :consist-of (s3.p / paper)
                                       :same-as s1.p3))
               :op2 (s3.n / next-to
                          :op1 (s3.s / soda
                                     :quant (s3.v / volume-quantity
                                                  :unit (s3.c / cup)
                                                  :quant "1"))
                          :op2 s3.p3))
   :snt4 (s4.a / and
               :op1 (s4.s / sit-01
                          :ARG1 (s4.p / person)
                          :ARG2 (s4.t / table
                                      :same-as s1.t))
               :op2 (s4.h / handbag
                          :location s4.t
                          :mod (s4.a2 / as-well))))