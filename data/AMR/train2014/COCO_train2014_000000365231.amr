# ::id train2014~COCO_train2014_000000365231
# ::doc_file train2014~COCO_train2014_000000365231
# ::tok Three pelicans are flying over the ocean . <next_sent> The first pelican is in the left side of the image , the second pelican is in the middle , and the third pelican is in the right side of the image . <next_sent> They are flying in a line , with the first pelican being the closest to the water .
(d / document
   :snt1 (s1.f / fly-01
               :ARG2 (s1.p / pelican
                           :quant "3")
               :path (s1.o2 / over
                            :op1 (s1.o / ocean)))
   :snt2 (s2.a / and
               :op1 (s2.b / be-located-at-91
                          :ARG1 (s2.p / pelican
                                      :ord (s2.o / ordinal-entity
                                                 :value "1"))
                          :ARG2 (s2.s / side
                                      :ARG1-of (s2.l / left-20)
                                      :part-of (s2.i / image
                                                     :part (s2.s2 / side
                                                                  :ARG1-of (s2.r / right-04)))))
               :op2 (s2.b2 / be-located-at-91
                           :ARG1 (s2.p2 / pelican
                                        :ord (s2.o2 / ordinal-entity
                                                    :value "2"))
                           :ARG2 (s2.m / middle))
               :op3 (s2.b3 / be-located-at-91
                           :ARG1 (s2.p3 / pelican
                                        :ord (s2.o3 / ordinal-entity
                                                    :value "3"))
                           :ARG2 s2.s2))
   :snt3 (s3.f / fly-01
               :ARG1 (s3.t / they
                           :same-as s1.p)
               :example (s3.h / have-degree-91
                              :ARG1 (s3.p / pelican
                                          :ord (s3.o / ordinal-entity
                                                     :value "1")
                                          :same-as s2.p)
                              :ARG2 (s3.c / close-10
                                          :ARG1 s3.p
                                          :ARG2 (s3.w / water))
                              :ARG3 (s3.m / most))
               :manner (s3.l / line)))