# ::id train2014~COCO_train2014_000000144320
# ::doc_file train2014~COCO_train2014_000000144320
# ::tok A pizza is cut into slices and rests on a wooden platter . <next_sent> The pizza is topped with bacon and cheese . <next_sent> A fork and knife are placed on the platter , with the fork on the left side and the knife on the right . <next_sent> The pizza is missing a slice , and the remaining slices are arranged in a circular pattern .
(d / document
   :snt1 (s1.a / and
               :op1 (s1.c / cut-01
                          :ARG1 (s1.p / pizza)
                          :ARG2 (s1.s / slice))
               :op2 (s1.r / rest-01
                          :ARG1 s1.p
                          :ARG2 (s1.p2 / platter
                                       :consist-of (s1.w / wood))))
   :snt2 (s2.t / top-01
               :ARG1 (s2.p / pizza
                           :same-as s1.p)
               :ARG2 (s2.a / and
                           :op1 (s2.b / bacon)
                           :op2 (s2.c / cheese)))
   :snt3 (s3.p / place-01
               :ARG1 (s3.a / and
                           :op1 (s3.f / fork)
                           :op2 (s3.k / knife))
               :ARG1-of (s3.m / mean-01
                              :ARG2 (s3.a2 / and
                                           :op1 (s3.b / be-located-at-91
                                                      :ARG1 s3.f
                                                      :ARG2 (s3.s / side
                                                                  :ARG1-of (s3.l / left-20)))
                                           :op2 (s3.b2 / be-located-at-91
                                                       :ARG1 s3.k
                                                       :ARG2 (s3.s2 / side
                                                                    :ARG1-of (s3.r / right-04)))))
               :ARG2 (s3.p2 / platter
                            :same-as s1.p2))
   :snt4 (s4.a / and
               :op1 (s4.m / miss-01
                          :ARG0 (s4.p2 / pizza
                                       :same-as s1.p)
                          :ARG1 (s4.s / slice))
               :op2 (s4.a2 / arrange-01
                           :ARG1 (s4.s2 / slice
                                        :ARG1-of (s4.r / remain-01))
                           :manner (s4.p / pattern
                                         :mod (s4.c / circular)))))