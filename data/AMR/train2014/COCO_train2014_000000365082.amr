# ::id train2014~COCO_train2014_000000365082
# ::doc_file train2014~COCO_train2014_000000365082
# ::tok A man is sitting at a table with a pizza in front of him . <next_sent> The pizza is on a plate and has a variety of toppings . <next_sent> The man is wearing a black shirt and is holding the pizza with one hand . <next_sent> There are also two other pizzas on the table , one to the left and one to the right of the man .
(d / document
   :snt1 (s1.s / sit-01
               :ARG1 (s1.m / man
                           :location (s1.i / in-front-of
                                           :location-of (s1.p / pizza)
                                           :op1 s1.m))
               :ARG2 (s1.t / table))
   :snt2 (s2.a / and
               :op1 (s2.b / be-located-at-91
                          :ARG1 (s2.p / pizza
                                      :same-as s1.p)
                          :ARG2 (s2.p2 / plate))
               :op2 (s2.h / have-03
                          :ARG0 s2.p
                          :ARG1 (s2.i / ingredient
                                      :ARG2-of (s2.t / top-01)
                                      :mod (s2.v / variety))))
   :snt3 (s3.a / and
               :op1 (s3.w / wear-01
                          :ARG0 (s3.m / man
                                      :same-as s1.m)
                          :ARG1 (s3.s / shirt
                                      :ARG1-of (s3.b / black-04)))
               :op2 (s3.h2 / hold-01
                           :ARG0 s3.m
                           :ARG1 (s3.p / pizza
                                       :same-as s1.p)
                           :manner (s3.h / hand
                                         :quant "1")))
   :snt4 (s4.t / table-01
               :ARG1 (s4.p / pizzeria
                           :domain (s4.p2 / pizzeria
                                          :ARG1-of (s4.l / left-20)
                                          :ARG1-of (s4.r / right-04
                                                         :ARG2 (s4.m / man
                                                                     :same-as s1.m))
                                          :quant "1")
                           :example (s4.a2 / and
                                           :op2 s4.p2)
                           :op1-of s4.a2
                           :mod (s4.o / other)
                           :mod (s4.a / also)
                           :quant "2")
               :same-as s1.t))