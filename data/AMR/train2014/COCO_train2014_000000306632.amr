# ::id train2014~COCO_train2014_000000306632
# ::doc_file train2014~COCO_train2014_000000306632
# ::tok A group of people are gathered around a table with two cakes on it . <next_sent> One cake is white and red and the other is white and pink . <next_sent> The people are standing around the table and smiling , with some of them pointing at the cakes . <next_sent> There are also a few cups on the table .
(d / document
   :snt1 (s1.g / gather-03
               :ARG0 (s1.g2 / group
                            :consist-of (s1.p / person))
               :location (s1.a / around
                               :op1 (s1.t / table
                                          :part (s1.c / cake
                                                      :quant "2"))))
   :snt2 (s2.a2 / and
                :op1 (s2.a / and
                           :op1 (s2.c / cake
                                      :ARG1-of (s2.w / white-03)
                                      :mod (s2.o / one))
                           :op2 (s2.c2 / cake
                                       :ARG1-of (s2.r / red-02)
                                       :ARG1-of (s2.w2 / white-03)
                                       :ARG1-of (s2.p / pink-04)
                                       :mod (s2.o2 / other))))
   :snt3 (s3.a / and
               :op1 (s3.s3 / stand-01
                           :ARG1 (s3.p / person
                                       :ARG2-of (s3.i / include-91
                                                      :ARG3 (s3.s2 / some))
                                       :same-as s1.g2)
                           :ARG2 (s3.a2 / around
                                        :op1 (s3.t / table
                                                   :same-as s1.t)))
               :op2 (s3.s / smile-01
                          :ARG0 s3.p)
               :op3 (s3.p2 / point-01
                           :ARG0 s3.p
                           :ARG1 (s3.c / cake
                                       :same-as s1.c)))
   :snt4 (s4.b / be-located-at-91
               :ARG1 (s4.c / cup
                           :quant (s4.f / few))
               :ARG2 (s4.t / table
                           :same-as s1.t)
               :mod (s4.a / also)))