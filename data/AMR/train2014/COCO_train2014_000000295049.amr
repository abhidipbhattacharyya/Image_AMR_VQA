# ::id train2014~COCO_train2014_000000295049
# ::doc_file train2014~COCO_train2014_000000295049
# ::tok A box of fruit flavored envelopes is displayed on a white surface . <next_sent> The envelopes are in various colors and have different fruits printed on them . <next_sent> There are five envelopes in total , with one on the left , one on the right , one in the middle , and two on the top . <next_sent> The envelopes are arranged in a way that they are stacked on top of each other .
(d / document
   :snt1 (s1.d / display-01
               :ARG1 (s1.b / box
                           :consist-of (s1.e / envelope
                                             :ARG1-of (s1.f / flavor-00
                                                            :ARG2 (s1.f2 / fruit))))
               :ARG2 (s1.s / surface
                           :ARG1-of (s1.w / white-03)))
   :snt2 (s2.a / and
               :op1 (s2.e / envelope
                          :mod (s2.c / color
                                     :mod (s2.v / various))
                          :same-as s1.e)
               :op2 (s2.p / print-01
                          :ARG1 (s2.f / fruit
                                      :ARG1-of (s2.d / differ-02))
                          :location s2.e))
   :snt3 (s3.e / envelope
               :ARG2-of (s3.t3 / total-01)
               :consist-of (s3.a / and
                                 :op1 (s3.o / one
                                            :ARG1-of (s3.l / left-19))
                                 :op2 (s3.o2 / one
                                             :ARG1-of (s3.r / right-04))
                                 :op3 (s3.o3 / one
                                             :location (s3.m / middle)
                                             :location (s3.t2 / top))
                                 :op4 (s3.t / thing
                                            :quant "2"))
               :quant "5")
   :snt4 (s4.a / arrange-01
               :ARG1 (s4.e2 / envelope
                            :same-as s1.e)
               :manner (s4.w / way
                             :manner-of (s4.s / stack-01
                                              :ARG1 s4.e2
                                              :ARG2 (s4.t / top-01
                                                          :ARG1 (s4.o / other
                                                                      :mod (s4.e / each))
                                                          :ARG2 s4.e2)))))