# ::id train2014~COCO_train2014_000000471096
# ::doc_file train2014~COCO_train2014_000000471096
# ::tok A group of elephants are enjoying a swim in a river . <next_sent> There are three elephants in the water , with one on the left , one in the middle , and one on the right . <next_sent> The elephants are of different sizes , with one being larger than the other two . <next_sent> The elephants are all facing the same direction , possibly looking for something in the water .
(d / document
   :snt1 (s1.e2 / enjoy-01
                :ARG0 (s1.g / group
                            :consist-of (s1.e / elephant))
                :ARG1 (s1.s / swim-01
                            :ARG0 s1.g
                            :ARG1 (s1.r / river)))
   :snt2 (s2.b / be-located-at-91
               :ARG1 (s2.e / elephant
                           :accompanier (s2.a / and
                                              :op1 (s2.o / one
                                                         :ARG1-of (s2.l / left-19))
                                              :op2 (s2.o2 / one
                                                          :ARG1-of (s2.r / right-04)
                                                          :location (s2.m / middle)))
                           :quant "3")
               :ARG2 (s2.w / water))
   :snt3 (s3.a / and
               :op1 (s3.s / size
                          :ARG1-of (s3.d / differ-02)
                          :poss (s3.e / elephant
                                      :same-as s1.g))
               :op2 (s3.h / have-degree-91
                          :ARG1 (s3.o / one)
                          :ARG2 (s3.l / large)
                          :ARG3 (s3.m / more)
                          :ARG4 (s3.t / two
                                      :mod (s3.o2 / other))))
   :snt4 (s4.f / face-01
               :purpose (s4.l / look-01
                              :ARG0 (s4.e / elephant
                                          :mod (s4.a / all)
                                          :same-as s1.g)
                              :ARG1 (s4.s2 / something
                                           :location (s4.w / water
                                                           :same-as s2.w))
                              :ARG1-of (s4.p / possible-01))
               :ARG0 s4.e
               :ARG1 (s4.d / direction
                           :ARG1-of (s4.s / same-01))))