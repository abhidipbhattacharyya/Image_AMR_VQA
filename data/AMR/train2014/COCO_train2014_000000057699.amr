# ::id train2014~COCO_train2014_000000057699
# ::doc_file train2014~COCO_train2014_000000057699
# ::tok A pile of clothing is stacked on a table , including a white shirt and a blue shirt . <next_sent> The clothing is in various states of folding , with some items appearing to be folded and others not . <next_sent> There is also a camera bag on the table , and a pair of scissors is placed nearby .
(d / document
   :snt1 (s1.s3 / stack-01
                :ARG1 (s1.p / pile
                            :ARG2-of (s1.i / include-01
                                           :ARG1 (s1.a / and
                                                       :op1 (s1.s / shirt
                                                                  :ARG1-of (s1.w / white-03))
                                                       :op2 (s1.s2 / shirt
                                                                   :mod (s1.b / blue))))
                            :consist-of (s1.c / clothing))
                :ARG2 (s1.t / table))
   :snt2 (s2.a / and
               :op1 (s2.f / fold-03
                          :ARG1 (s2.c / clothing
                                      :same-as s1.c)
                          :mod (s2.v / various))
               :op2 (s2.a2 / and
                           :op1 (s2.a3 / appear-02
                                       :ARG1 (s2.f2 / fold-03
                                                    :ARG1 (s2.i / item
                                                                :quant (s2.s / some))))
                           :op2 (s2.a4 / appear-02
                                       :ARG1 (s2.f3 / fold-03
                                                    :ARG1 (s2.i2 / item
                                                                 :mod (s2.o / other))
                                                    :polarity "-"))))
   :snt3 (s3.a2 / and
                :op1 (s3.b2 / be-located-at-91
                            :ARG1 (s3.b / bag
                                        :consist-of (s3.c / camera))
                            :ARG2 (s3.t / table
                                        :same-as s1.t)
                            :mod (s3.a / also))
                :op2 (s3.p2 / place-01
                            :ARG1 (s3.s / scissors
                                        :quant (s3.p / pair))
                            :ARG2 (s3.n / nearby))))