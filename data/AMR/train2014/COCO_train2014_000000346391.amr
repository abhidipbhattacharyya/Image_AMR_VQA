# ::id train2014~COCO_train2014_000000346391
# ::doc_file train2014~COCO_train2014_000000346391
# ::tok A box of donuts is filled with various flavors and toppings . <next_sent> There are at least 13 donuts in the box , with some of them being glazed , and others having different toppings . <next_sent> The donuts are arranged in a way that they are stacked on top of each other , filling the entire box .
(d / document
   :snt1 (s1.f / fill-01
               :ARG1 (s1.b / box
                           :consist-of (s1.d / donut))
               :ARG2 (s1.a / and
                           :mod (s1.v / various)
                           :op1 (s1.f2 / flavor-00)
                           :op2 (s1.t / top-01)))
   :snt2 (s2.b / be-located-at-91
               :ARG1 (s2.d2 / donut
                            :quant (s2.a2 / at-least
                                          :op1 "13")
                            :ARG2-of (s2.i / include-91
                                           :ARG1 (s2.a / and
                                                       :op1 (s2.g / glaze-01
                                                                  :ARG1 (s2.d3 / donut
                                                                               :quant (s2.s / some)))
                                                       :op2 (s2.h / have-03
                                                                  :ARG0 (s2.o / other)
                                                                  :ARG1 (s2.t / topple-01
                                                                              :ARG1 s2.d3
                                                                              :ARG1-of (s2.d / differ-02))))))
               :ARG2 (s2.b2 / box
                            :same-as s1.b))
   :snt3 (s3.a / arrange-01
               :ARG1 (s3.d / donut
                           :ARG2-of (s3.f / fill-01
                                          :ARG1 (s3.b / box
                                                      :mod (s3.e2 / entire)
                                                      :same-as s1.b))
                           :same-as s2.a2)
               :manner (s3.w / way
                             :manner-of (s3.s / stack-01
                                              :ARG1 s3.d
                                              :ARG2 (s3.t / top-01
                                                          :ARG1 (s3.e / each
                                                                      :mod (s3.o / other))
                                                          :ARG2 s3.d)))))